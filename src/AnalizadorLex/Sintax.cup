package AnalizadorLex;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, T_dato, Cadena, If, Else, Do, While, For, Int, Double,Char,Float,Const,Long,
    Union,Struct,Short,Unsigned,Enum,Extern,Register,TypeDef,PrintF,ScanF,Cin,Cout,Continue,GoTo,Switch,Case,
    Default,Break,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parent_a, Parent_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Punto, Coma, Identificador,
    Numero,Return, ERROR;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, DECLARACIONV, CADENA,  PRINTF, SCANF, SENTENCIACOUT, CIN, COUT ;

start with INICIO;

INICIO ::= 
    Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Main Parent_a Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA FOR |
    FOR |
    PRINTF |
    SCANF |
    CIN |
    COUT
;
DECLARACION ::= 
    T_dato Identificador P_coma | 
    T_dato Identificador Op_atribucion Numero P_coma |
    T_dato Identificador Op_atribucion Numero Punto Numero P_coma |
    T_dato Identificador Igual Numero P_coma |
    T_dato Identificador Igual Numero Punto Numero P_coma |
    T_dato Identificador Op_incremento P_coma | 
    T_dato Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma
;
IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;
DECLARACIONV ::=
    Identificador |
    Identificador Coma DECLARACIONV
;
CADENA ::=
    Identificador |
    Identificador CADENA
;
PRINTF ::=
    PrintF Parent_a Comillas CADENA Comillas Parent_c P_coma |
    PrintF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma 
;
 SCANF ::=
    ScanF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma
;
CIN ::=
    Cin Op_relacional Identificador P_coma
;
SENTENCIACOUT ::=
    Op_relacional Identificador |
    Op_relacional Comillas CADENA Comillas |
    Op_relacional Identificador SENTENCIACOUT |
    Op_relacional Comillas CADENA Comillas SENTENCIACOUT 
;
COUT ::=
    Cout Op_relacional Comillas CADENA Comillas P_coma |
    Cout Op_relacional Comillas CADENA Comillas SENTENCIACOUT P_coma 
;
