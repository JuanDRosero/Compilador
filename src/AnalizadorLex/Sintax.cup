package AnalizadorLex;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Linea, Comillas, T_dato, Cadena, If, Else, Do, While, For, Int, Double,Char,Float,Const,Long,
    Union,Struct,Short,Unsigned,Enum,Extern,Register,TypeDef,PrintF,ScanF,Cin,Cout,Continue,GoTo,Switch,Case,
    Default,Break,
    Igual, Suma, Resta, Multiplicacion, Division, Op_logico, Op_relacional,
    Op_atribucion, Op_incremento, Op_booleano, Parent_a, Parent_c,
    Llave_a, Llave_c, Corchete_a, Corchete_c, Main, P_coma, Punto, Coma, Identificador, Dos_puntos,
    Numero, Return, ERROR;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR, DECLARACIONV, CADENA,  PRINTF,
 SCANF, SENTENCIACOUT, CIN, COUT, SWITCH, SENTENCIA_CASE, DECLARACION_STRUCT, STRUCT, VARIABLES_STRUCT, RETURN, ELEMENTOS, ELEMENTOS_DECLARACION, ENUM, GOTOSENT, GOTO;

start with INICIO;

INICIO ::= 
    Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    STRUCT Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    STRUCT Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA FOR |
    FOR |
    PRINTF |
    SENTENCIA PRINTF |
    SCANF |
    SENTENCIA SCANF |
    CIN |
    SENTENCIA CIN |
    COUT |
    SENTENCIA COUT |
    SWITCH |
    SENTENCIA SWITCH |
    ENUM |
    STRUCT |
    SENTENCIA ENUM |
    RETURN |
    Continue P_coma |
    SENTENCIA Continue P_coma |
    Break P_coma |
    SENTENCIA Break P_coma |
    GOTO |
    SENTENCIA GOTO 
;
DECLARACION ::= 
    Int Identificador P_coma |
    Int Identificador Op_atribucion Numero P_coma |
    Int Identificador Igual Numero P_coma |
    Const Int Identificador Igual Numero P_coma |
    Int Identificador Op_incremento P_coma | 
    Int Op_incremento Identificador P_coma |
    Short Int Identificador P_coma |
    Short Int Identificador Op_atribucion Numero P_coma |
    Short Int Identificador Igual Numero P_coma |
    Short Int Identificador Op_incremento P_coma | 
    Short Int Op_incremento Identificador P_coma |
    Short Identificador P_coma |
    Long Identificador P_coma | 
    Long Int Identificador P_coma |
    Long Int Identificador Op_atribucion Numero P_coma |
    Long Int Identificador Igual Numero P_coma |
    Long Int Identificador Op_incremento P_coma | 
    Long Int Op_incremento Identificador P_coma |
    Long Long Int Identificador P_coma |
    Long Long Int Identificador Op_atribucion Numero P_coma |
    Long Long Int Identificador Igual Numero P_coma |
    Long Long Int Identificador Op_incremento P_coma | 
    Long Long Int Op_incremento Identificador P_coma | 
    Double Identificador P_coma |
    Double Identificador Op_atribucion Numero Punto Numero P_coma |
    Double Identificador Igual Numero Punto Numero P_coma |
    Long Double Identificador P_coma |
    Long Double Identificador Op_atribucion Numero Punto Numero P_coma |
    Long Double Identificador Igual Numero Punto Numero P_coma |
    Const Double Identificador Igual Numero Punto Numero P_coma |
    Char Identificador P_coma |
    Char Identificador Igual Comillas Identificador Comillas P_coma|
    Const Char Identificador Igual Comillas Identificador Comillas P_coma| 
    Float Identificador P_coma | 
    Float Identificador Op_atribucion Numero Punto Numero P_coma |
    Float Identificador Igual Numero Punto Numero P_coma |
    Const Float Identificador Igual Numero Punto Numero P_coma |
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    Const Cadena Identificador Igual Comillas Identificador Comillas P_coma |
    Unsigned Int Identificador P_coma |
    Unsigned Long Long Identificador P_coma |
    Unsigned Short Identificador P_coma |
    Unsigned Long Identificador P_coma |
    Unsigned Char Identificador P_coma |
    Unsigned Int Identificador Igual Numero P_coma |
    Unsigned Long Long Identificador Igual Numero P_coma |
    Unsigned Short Identificador Igual Numero P_coma |
    Unsigned Long Identificador Igual Numero P_coma |
    Unsigned Char Identificador Igual Comillas Identificador Comillas P_coma |
    Register Int Identificador P_coma |
    Register Int Identificador Igual Numero P_coma |
    Extern Int Identificador P_coma |
    Extern Const Int Identificador P_coma |
    Extern Const Int Identificador Igual Numero P_coma |
    Extern Int Identificador Igual Numero P_coma |
    Extern Const Identificador Igual Numero P_coma |
    Extern Const Identificador |
    Extern Comillas Identificador Comillas |
    TypeDef STRUCT |
    TypeDef Unsigned Long Identificador P_coma |
    TypeDef Int Identificador P_coma |
    Identificador Identificador Igual Llave_a VARIABLES_STRUCT Llave_c P_coma
;
ELEMENTOS ::=
    Identificador |
    Identificador Coma ELEMENTOS
;
ELEMENTOS_DECLARACION ::=
    Identificador Igual Numero |
    Identificador Igual Numero Coma ELEMENTOS_DECLARACION |
    ELEMENTOS ELEMENTOS_DECLARACION
;
ENUM ::=
    Enum Llave_a ELEMENTOS Llave_c P_coma |
    Enum Llave_a ELEMENTOS_DECLARACION Llave_c P_coma
;
IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
SENTENCIA_CASE ::=
    Case Numero Dos_puntos SENTENCIA Break P_coma |
    Case Comillas Identificador Comillas Dos_puntos SENTENCIA Break P_coma |
    Case Numero Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE |
    Case Comillas Identificador Comillas Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE
;
SWITCH ::=
    Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_CASE Llave_c
;

DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;
DECLARACIONV ::=
    Identificador |
    Identificador Coma DECLARACIONV
;
CADENA ::=
    Identificador |
    Identificador CADENA
;

PRINTF ::=
    PrintF Parent_a Comillas CADENA Comillas Parent_c P_coma |
    PrintF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma 
;
 SCANF ::=
    ScanF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma
;
CIN ::=
    Cin Op_relacional Identificador P_coma
;
SENTENCIACOUT ::=
    Op_relacional Identificador |
    Op_relacional Comillas CADENA Comillas |
    Op_relacional Identificador SENTENCIACOUT |
    Op_relacional Comillas CADENA Comillas SENTENCIACOUT 
;
COUT ::=
    Cout Op_relacional Comillas CADENA Comillas P_coma |
    Cout Op_relacional Comillas CADENA Comillas SENTENCIACOUT P_coma 
;
DECLARACION_STRUCT ::=
    DECLARACION |
    DECLARACION DECLARACION_STRUCT 
;
VARIABLES_STRUCT ::=
    Numero |
    Comillas CADENA Comillas |
    Numero Punto Numero |
    Numero Coma VARIABLES_STRUCT |
    Comillas CADENA Comillas Coma VARIABLES_STRUCT |
    Numero Punto Numero Coma VARIABLES_STRUCT
;
STRUCT ::=
    Struct Identificador Llave_a DECLARACION_STRUCT Llave_c P_coma 
;
GOTOSENT ::=
    Identificador Dos_puntos SENTENCIA
;
GOTO ::=
    GoTo Identificador P_coma
;
RETURN ::=
    Return Identificador P_coma |
    Return Numero P_coma
;