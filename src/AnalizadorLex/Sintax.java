
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 24 17:10:45 COT 2021
//----------------------------------------------------

package AnalizadorLex;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 24 17:10:45 COT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\303\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\002\012\000\002\002\011\000\002\002\012" +
    "\000\002\002\011\000\002\002\013\000\002\002\012\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\004\000\002\003\005\000\002" +
    "\003\004\000\002\003\005\000\002\003\003\000\002\003" +
    "\004\000\002\004\005\000\002\004\007\000\002\004\007" +
    "\000\002\004\010\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\010\000\002\004\010\000\002" +
    "\004\007\000\002\004\007\000\002\004\005\000\002\004" +
    "\005\000\002\004\006\000\002\004\010\000\002\004\010" +
    "\000\002\004\007\000\002\004\007\000\002\004\007\000" +
    "\002\004\011\000\002\004\011\000\002\004\010\000\002" +
    "\004\010\000\002\004\011\000\002\004\011\000\002\004" +
    "\011\000\002\004\011\000\002\004\005\000\002\004\011" +
    "\000\002\004\011\000\002\004\006\000\002\004\012\000" +
    "\002\004\012\000\002\004\012\000\002\004\015\000\002" +
    "\004\015\000\002\004\015\000\002\004\015\000\002\004" +
    "\005\000\002\004\011\000\002\004\012\000\002\004\005" +
    "\000\002\004\011\000\002\004\011\000\002\004\012\000" +
    "\002\004\015\000\002\004\015\000\002\004\015\000\002" +
    "\004\015\000\002\004\005\000\002\004\010\000\002\004" +
    "\010\000\002\004\011\000\002\004\011\000\002\004\012" +
    "\000\002\004\021\000\002\004\006\000\002\004\007\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\010\000\002\004\011\000\002\004\010\000\002\004" +
    "\010\000\002\004\012\000\002\004\006\000\002\004\010" +
    "\000\002\004\006\000\002\004\007\000\002\004\011\000" +
    "\002\004\010\000\002\004\010\000\002\004\005\000\002" +
    "\004\006\000\002\004\004\000\002\004\007\000\002\004" +
    "\006\000\002\004\011\000\002\004\006\000\002\004\006" +
    "\000\002\004\010\000\002\004\010\000\002\004\006\000" +
    "\002\004\006\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\014\000\002\004\014\000\002\004\014" +
    "\000\002\004\014\000\002\004\020\000\002\032\003\000" +
    "\002\032\005\000\002\033\005\000\002\033\007\000\002" +
    "\033\004\000\002\034\007\000\002\034\007\000\002\006" +
    "\011\000\002\013\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\006\000\002\013\007\000" +
    "\002\007\015\000\002\010\011\000\002\011\013\000\002" +
    "\012\011\000\002\014\012\000\002\014\011\000\002\025" +
    "\010\000\002\025\012\000\002\025\011\000\002\025\013" +
    "\000\002\024\011\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\015\003\000\002\015\005\000\002" +
    "\016\003\000\002\016\004\000\002\017\011\000\002\017" +
    "\013\000\002\020\013\000\002\022\006\000\002\021\004" +
    "\000\002\021\006\000\002\021\005\000\002\021\007\000" +
    "\002\023\010\000\002\023\011\000\002\026\003\000\002" +
    "\026\004\000\002\030\003\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\007\000\002\030\007" +
    "\000\002\027\010\000\002\035\005\000\002\036\005\000" +
    "\002\031\005\000\002\031\007\000\002\031\005\000\002" +
    "\031\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0271\000\010\015\010\024\004\065\006\001\002\000" +
    "\004\071\u026d\001\002\000\006\015\u025f\065\u025e\001\002" +
    "\000\004\057\u0258\001\002\000\004\002\u0257\001\002\000" +
    "\004\065\011\001\002\000\004\057\012\001\002\000\004" +
    "\060\013\001\002\000\004\061\014\001\002\000\072\007" +
    "\037\010\022\012\050\013\034\014\041\015\035\016\020" +
    "\017\046\020\040\021\061\022\032\024\004\025\054\026" +
    "\021\027\026\030\030\031\055\032\044\033\066\034\016" +
    "\035\065\036\025\037\052\040\056\041\043\044\027\071" +
    "\064\074\033\001\002\000\074\002\ufff3\007\ufff3\010\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3" +
    "\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\040\ufff3\041\ufff3\044\ufff3\062\ufff3\071\ufff3\074\ufff3" +
    "\001\002\000\004\057\u024f\001\002\000\074\002\uffea\007" +
    "\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\044\uffea\062\uffea\071" +
    "\uffea\074\uffea\001\002\000\004\071\u022f\001\002\000\012" +
    "\015\u0212\017\u020f\022\u0210\025\u0211\001\002\000\004\057" +
    "\u0205\001\002\000\072\007\037\010\022\012\050\013\034" +
    "\014\041\015\035\016\020\017\046\020\040\021\061\022" +
    "\032\025\054\026\021\027\026\030\030\031\055\032\044" +
    "\033\066\034\016\035\065\036\025\037\345\040\056\041" +
    "\043\044\336\062\u0200\071\064\074\033\001\002\000\074" +
    "\002\uffed\007\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\044\uffed" +
    "\062\uffed\071\uffed\074\uffed\001\002\000\004\053\u01f2\001" +
    "\002\000\004\061\u01e1\001\002\000\004\066\u01e0\001\002" +
    "\000\010\005\u01cc\015\u01ce\021\u01cd\001\002\000\074\002" +
    "\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\044\ufff0\062" +
    "\ufff0\071\ufff0\074\ufff0\001\002\000\012\015\u01a3\016\u01a0" +
    "\022\u01a1\071\u01a2\001\002\000\010\005\u0197\071\u0198\073" +
    "\u0196\001\002\000\004\057\u0190\001\002\000\006\055\u0177" +
    "\071\u0178\001\002\000\074\002\ufff5\007\ufff5\010\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\044\ufff5\062\ufff5\071\ufff5\074\ufff5\001" +
    "\002\000\004\071\u015b\001\002\000\004\071\u013b\001\002" +
    "\000\004\057\u0120\001\002\000\074\002\uffdf\007\uffdf\010" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\044\uffdf\062\uffdf\071\uffdf\074" +
    "\uffdf\001\002\000\004\057\u010b\001\002\000\010\015\u0105" +
    "\024\004\026\u0103\001\002\000\074\002\uffe8\007\uffe8\010" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\025\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\037\uffe8\040\uffe8\041\uffe8\044\uffe8\062\uffe8\071\uffe8\074" +
    "\uffe8\001\002\000\004\071\374\001\002\000\074\002\uffec" +
    "\007\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\025\uffec\026\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035" +
    "\uffec\036\uffec\037\uffec\040\uffec\041\uffec\044\uffec\062\uffec" +
    "\071\uffec\074\uffec\001\002\000\004\061\330\001\002\000" +
    "\074\002\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\044" +
    "\uffe4\062\uffe4\071\uffe4\074\uffe4\001\002\000\004\066\327" +
    "\001\002\000\074\002\ufff7\007\ufff7\010\ufff7\012\ufff7\013" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7" +
    "\022\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7" +
    "\041\ufff7\044\ufff7\062\ufff7\071\ufff7\074\ufff7\001\002\000" +
    "\006\015\310\071\307\001\002\000\004\015\301\001\002" +
    "\000\004\071\277\001\002\000\074\002\uffe6\007\uffe6\010" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\022\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\uffe6\041\uffe6\044\uffe6\062\uffe6\071\uffe6\074" +
    "\uffe6\001\002\000\074\002\uffe2\007\uffe2\010\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\044\uffe2\062\uffe2\071\uffe2\074\uffe2\001\002" +
    "\000\014\007\242\015\241\016\237\017\236\020\240\001" +
    "\002\000\074\002\uffd9\007\uffd9\010\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\044\uffd9\062\uffd9\071\uffd9\074\uffd9\001\002\000\074" +
    "\002\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\025\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\044\ufff1" +
    "\062\ufff1\071\ufff1\074\ufff1\001\002\000\010\045\114\054" +
    "\112\071\113\001\002\000\004\053\107\001\002\000\004" +
    "\057\070\001\002\000\074\002\uffe1\007\uffe1\010\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\044\uffe1\062\uffe1\071\uffe1\074\uffe1\001" +
    "\002\000\004\005\071\001\002\000\004\071\072\001\002" +
    "\000\006\005\uff59\071\072\001\002\000\004\005\074\001" +
    "\002\000\006\060\075\070\076\001\002\000\004\066\105" +
    "\001\002\000\004\071\100\001\002\000\004\060\103\001" +
    "\002\000\006\060\uff5b\070\101\001\002\000\004\071\100" +
    "\001\002\000\004\060\uff5a\001\002\000\004\066\104\001" +
    "\002\000\074\002\uff56\007\uff56\010\uff56\012\uff56\013\uff56" +
    "\014\uff56\015\uff56\016\uff56\017\uff56\020\uff56\021\uff56\022" +
    "\uff56\025\uff56\026\uff56\027\uff56\030\uff56\031\uff56\032\uff56" +
    "\033\uff56\034\uff56\035\uff56\036\uff56\037\uff56\040\uff56\041" +
    "\uff56\044\uff56\062\uff56\071\uff56\074\uff56\001\002\000\074" +
    "\002\uff57\007\uff57\010\uff57\012\uff57\013\uff57\014\uff57\015" +
    "\uff57\016\uff57\017\uff57\020\uff57\021\uff57\022\uff57\025\uff57" +
    "\026\uff57\027\uff57\030\uff57\031\uff57\032\uff57\033\uff57\034" +
    "\uff57\035\uff57\036\uff57\037\uff57\040\uff57\041\uff57\044\uff57" +
    "\062\uff57\071\uff57\074\uff57\001\002\000\004\005\uff58\001" +
    "\002\000\004\071\110\001\002\000\004\066\111\001\002" +
    "\000\074\002\uff54\007\uff54\010\uff54\012\uff54\013\uff54\014" +
    "\uff54\015\uff54\016\uff54\017\uff54\020\uff54\021\uff54\022\uff54" +
    "\025\uff54\026\uff54\027\uff54\030\uff54\031\uff54\032\uff54\033" +
    "\uff54\034\uff54\035\uff54\036\uff54\037\uff54\040\uff54\041\uff54" +
    "\044\uff54\062\uff54\071\uff54\074\uff54\001\002\000\010\005" +
    "\224\071\225\073\223\001\002\000\004\045\202\001\002" +
    "\000\010\005\116\071\117\073\115\001\002\000\016\046" +
    "\130\047\126\050\131\051\124\066\125\067\127\001\002" +
    "\000\004\071\072\001\002\000\004\066\120\001\002\000" +
    "\074\002\uff84\007\uff84\010\uff84\012\uff84\013\uff84\014\uff84" +
    "\015\uff84\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\025" +
    "\uff84\026\uff84\027\uff84\030\uff84\031\uff84\032\uff84\033\uff84" +
    "\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041\uff84\044" +
    "\uff84\062\uff84\071\uff84\074\uff84\001\002\000\004\005\122" +
    "\001\002\000\004\066\123\001\002\000\074\002\uff81\007" +
    "\uff81\010\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016\uff81" +
    "\017\uff81\020\uff81\021\uff81\022\uff81\025\uff81\026\uff81\027" +
    "\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81" +
    "\036\uff81\037\uff81\040\uff81\041\uff81\044\uff81\062\uff81\071" +
    "\uff81\074\uff81\001\002\000\004\073\200\001\002\000\074" +
    "\002\uff83\007\uff83\010\uff83\012\uff83\013\uff83\014\uff83\015" +
    "\uff83\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\025\uff83" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\044\uff83" +
    "\062\uff83\071\uff83\074\uff83\001\002\000\004\073\176\001" +
    "\002\000\006\005\137\073\136\001\002\000\004\073\134" +
    "\001\002\000\004\073\132\001\002\000\004\066\133\001" +
    "\002\000\074\002\uff7e\007\uff7e\010\uff7e\012\uff7e\013\uff7e" +
    "\014\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021\uff7e\022" +
    "\uff7e\025\uff7e\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e" +
    "\033\uff7e\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041" +
    "\uff7e\044\uff7e\062\uff7e\071\uff7e\074\uff7e\001\002\000\004" +
    "\066\135\001\002\000\074\002\uff80\007\uff80\010\uff80\012" +
    "\uff80\013\uff80\014\uff80\015\uff80\016\uff80\017\uff80\020\uff80" +
    "\021\uff80\022\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80" +
    "\040\uff80\041\uff80\044\uff80\062\uff80\071\uff80\074\uff80\001" +
    "\002\000\014\046\154\047\153\050\155\051\151\066\152" +
    "\001\002\000\004\071\072\001\002\000\004\005\141\001" +
    "\002\000\004\046\142\001\002\000\004\005\143\001\002" +
    "\000\004\071\072\001\002\000\004\005\145\001\002\000" +
    "\004\067\146\001\002\000\004\073\147\001\002\000\004" +
    "\066\150\001\002\000\074\002\uff78\007\uff78\010\uff78\012" +
    "\uff78\013\uff78\014\uff78\015\uff78\016\uff78\017\uff78\020\uff78" +
    "\021\uff78\022\uff78\025\uff78\026\uff78\027\uff78\030\uff78\031" +
    "\uff78\032\uff78\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\041\uff78\044\uff78\062\uff78\071\uff78\074\uff78\001" +
    "\002\000\004\073\172\001\002\000\074\002\uff82\007\uff82" +
    "\010\uff82\012\uff82\013\uff82\014\uff82\015\uff82\016\uff82\017" +
    "\uff82\020\uff82\021\uff82\022\uff82\025\uff82\026\uff82\027\uff82" +
    "\030\uff82\031\uff82\032\uff82\033\uff82\034\uff82\035\uff82\036" +
    "\uff82\037\uff82\040\uff82\041\uff82\044\uff82\062\uff82\071\uff82" +
    "\074\uff82\001\002\000\004\073\166\001\002\000\004\073" +
    "\162\001\002\000\004\073\156\001\002\000\004\067\157" +
    "\001\002\000\004\073\160\001\002\000\004\066\161\001" +
    "\002\000\074\002\uff7a\007\uff7a\010\uff7a\012\uff7a\013\uff7a" +
    "\014\uff7a\015\uff7a\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022" +
    "\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a" +
    "\033\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041" +
    "\uff7a\044\uff7a\062\uff7a\071\uff7a\074\uff7a\001\002\000\004" +
    "\067\163\001\002\000\004\073\164\001\002\000\004\066" +
    "\165\001\002\000\074\002\uff7c\007\uff7c\010\uff7c\012\uff7c" +
    "\013\uff7c\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\021" +
    "\uff7c\022\uff7c\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c" +
    "\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040" +
    "\uff7c\041\uff7c\044\uff7c\062\uff7c\071\uff7c\074\uff7c\001\002" +
    "\000\004\067\167\001\002\000\004\073\170\001\002\000" +
    "\004\066\171\001\002\000\074\002\uff7b\007\uff7b\010\uff7b" +
    "\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020" +
    "\uff7b\021\uff7b\022\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b" +
    "\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b\037" +
    "\uff7b\040\uff7b\041\uff7b\044\uff7b\062\uff7b\071\uff7b\074\uff7b" +
    "\001\002\000\004\067\173\001\002\000\004\073\174\001" +
    "\002\000\004\066\175\001\002\000\074\002\uff79\007\uff79" +
    "\010\uff79\012\uff79\013\uff79\014\uff79\015\uff79\016\uff79\017" +
    "\uff79\020\uff79\021\uff79\022\uff79\025\uff79\026\uff79\027\uff79" +
    "\030\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036" +
    "\uff79\037\uff79\040\uff79\041\uff79\044\uff79\062\uff79\071\uff79" +
    "\074\uff79\001\002\000\004\066\177\001\002\000\074\002" +
    "\uff7f\007\uff7f\010\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f" +
    "\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022\uff7f\025\uff7f\026" +
    "\uff7f\027\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\044\uff7f\062" +
    "\uff7f\071\uff7f\074\uff7f\001\002\000\004\066\201\001\002" +
    "\000\074\002\uff7d\007\uff7d\010\uff7d\012\uff7d\013\uff7d\014" +
    "\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\021\uff7d\022\uff7d" +
    "\025\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033" +
    "\uff7d\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d" +
    "\044\uff7d\062\uff7d\071\uff7d\074\uff7d\001\002\000\004\061" +
    "\203\001\002\000\006\005\205\073\204\001\002\000\010" +
    "\062\uff4b\067\216\070\215\001\002\000\004\071\072\001" +
    "\002\000\004\062\207\001\002\000\004\066\210\001\002" +
    "\000\074\002\uff89\007\uff89\010\uff89\012\uff89\013\uff89\014" +
    "\uff89\015\uff89\016\uff89\017\uff89\020\uff89\021\uff89\022\uff89" +
    "\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033" +
    "\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89" +
    "\044\uff89\062\uff89\071\uff89\074\uff89\001\002\000\004\005" +
    "\212\001\002\000\006\062\uff4a\070\213\001\002\000\006" +
    "\005\205\073\204\001\002\000\004\062\uff47\001\002\000" +
    "\006\005\205\073\204\001\002\000\004\073\217\001\002" +
    "\000\006\062\uff49\070\220\001\002\000\006\005\205\073" +
    "\204\001\002\000\004\062\uff46\001\002\000\004\062\uff48" +
    "\001\002\000\006\066\232\067\233\001\002\000\004\071" +
    "\072\001\002\000\004\066\226\001\002\000\074\002\uff88" +
    "\007\uff88\010\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016" +
    "\uff88\017\uff88\020\uff88\021\uff88\022\uff88\025\uff88\026\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\037\uff88\040\uff88\041\uff88\044\uff88\062\uff88" +
    "\071\uff88\074\uff88\001\002\000\004\005\230\001\002\000" +
    "\004\066\231\001\002\000\074\002\uff85\007\uff85\010\uff85" +
    "\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\017\uff85\020" +
    "\uff85\021\uff85\022\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036\uff85\037" +
    "\uff85\040\uff85\041\uff85\044\uff85\062\uff85\071\uff85\074\uff85" +
    "\001\002\000\074\002\uff87\007\uff87\010\uff87\012\uff87\013" +
    "\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87" +
    "\022\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032" +
    "\uff87\033\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87" +
    "\041\uff87\044\uff87\062\uff87\071\uff87\074\uff87\001\002\000" +
    "\004\073\234\001\002\000\004\066\235\001\002\000\074" +
    "\002\uff86\007\uff86\010\uff86\012\uff86\013\uff86\014\uff86\015" +
    "\uff86\016\uff86\017\uff86\020\uff86\021\uff86\022\uff86\025\uff86" +
    "\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034" +
    "\uff86\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\044\uff86" +
    "\062\uff86\071\uff86\074\uff86\001\002\000\004\071\271\001" +
    "\002\000\004\071\263\001\002\000\004\071\255\001\002" +
    "\000\004\071\251\001\002\000\004\071\243\001\002\000" +
    "\004\045\244\001\002\000\004\005\245\001\002\000\004" +
    "\071\072\001\002\000\004\005\247\001\002\000\004\066" +
    "\250\001\002\000\074\002\uffa1\007\uffa1\010\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\044\uffa1\062\uffa1\071\uffa1\074\uffa1\001\002" +
    "\000\004\045\252\001\002\000\004\073\253\001\002\000" +
    "\004\066\254\001\002\000\074\002\uffd4\007\uffd4\010\uffd4" +
    "\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\044\uffd4\062\uffd4\071\uffd4\074\uffd4" +
    "\001\002\000\004\045\256\001\002\000\004\073\257\001" +
    "\002\000\004\067\260\001\002\000\004\073\261\001\002" +
    "\000\004\066\262\001\002\000\074\002\uffab\007\uffab\010" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\044\uffab\062\uffab\071\uffab\074" +
    "\uffab\001\002\000\004\045\264\001\002\000\004\073\265" +
    "\001\002\000\004\067\266\001\002\000\004\073\267\001" +
    "\002\000\004\066\270\001\002\000\074\002\uffb6\007\uffb6" +
    "\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017" +
    "\uffb6\020\uffb6\021\uffb6\022\uffb6\025\uffb6\026\uffb6\027\uffb6" +
    "\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036" +
    "\uffb6\037\uffb6\040\uffb6\041\uffb6\044\uffb6\062\uffb6\071\uffb6" +
    "\074\uffb6\001\002\000\004\045\272\001\002\000\004\005" +
    "\273\001\002\000\004\071\274\001\002\000\004\005\275" +
    "\001\002\000\004\066\276\001\002\000\074\002\uffaf\007" +
    "\uffaf\010\uffaf\012\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf" +
    "\017\uffaf\020\uffaf\021\uffaf\022\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\044\uffaf\062\uffaf\071" +
    "\uffaf\074\uffaf\001\002\000\004\066\300\001\002\000\074" +
    "\002\uff43\007\uff43\010\uff43\012\uff43\013\uff43\014\uff43\015" +
    "\uff43\016\uff43\017\uff43\020\uff43\021\uff43\022\uff43\025\uff43" +
    "\026\uff43\027\uff43\030\uff43\031\uff43\032\uff43\033\uff43\034" +
    "\uff43\035\uff43\036\uff43\037\uff43\040\uff43\041\uff43\044\uff43" +
    "\062\uff43\071\uff43\074\uff43\001\002\000\004\071\302\001" +
    "\002\000\006\045\304\066\303\001\002\000\074\002\uff95" +
    "\007\uff95\010\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016" +
    "\uff95\017\uff95\020\uff95\021\uff95\022\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\044\uff95\062\uff95" +
    "\071\uff95\074\uff95\001\002\000\004\073\305\001\002\000" +
    "\004\066\306\001\002\000\074\002\uff94\007\uff94\010\uff94" +
    "\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94\020" +
    "\uff94\021\uff94\022\uff94\025\uff94\026\uff94\027\uff94\030\uff94" +
    "\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\041\uff94\044\uff94\062\uff94\071\uff94\074\uff94" +
    "\001\002\000\004\066\326\001\002\000\006\055\311\071" +
    "\312\001\002\000\004\071\324\001\002\000\012\045\316" +
    "\054\313\055\315\066\314\001\002\000\004\073\322\001" +
    "\002\000\074\002\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\044\uffd1\062\uffd1\071\uffd1\074\uffd1\001\002\000\004" +
    "\066\321\001\002\000\004\073\317\001\002\000\004\066" +
    "\320\001\002\000\074\002\uffcf\007\uffcf\010\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\044\uffcf\062\uffcf\071\uffcf\074\uffcf\001\002" +
    "\000\074\002\uffce\007\uffce\010\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\044\uffce\062\uffce\071\uffce\074\uffce\001\002\000\004\066" +
    "\323\001\002\000\074\002\uffd0\007\uffd0\010\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\044\uffd0\062\uffd0\071\uffd0\074\uffd0\001\002" +
    "\000\004\066\325\001\002\000\074\002\uffcd\007\uffcd\010" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\021\uffcd\022\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\044\uffcd\062\uffcd\071\uffcd\074" +
    "\uffcd\001\002\000\074\002\uffcc\007\uffcc\010\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\044\uffcc\062\uffcc\071\uffcc\074\uffcc\001\002" +
    "\000\074\002\uffdd\007\uffdd\010\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\044\uffdd\062\uffdd\071\uffdd\074\uffdd\001\002\000\072\007" +
    "\037\010\022\012\050\013\034\014\041\015\035\016\020" +
    "\017\046\020\040\021\061\022\032\024\004\025\054\026" +
    "\021\027\026\030\030\031\055\032\044\033\066\034\016" +
    "\035\065\036\025\037\052\040\056\041\043\044\027\071" +
    "\064\074\033\001\002\000\072\007\037\010\022\012\050" +
    "\013\034\014\041\015\035\016\020\017\046\020\040\021" +
    "\061\022\032\025\054\026\021\027\026\030\030\031\055" +
    "\032\044\033\066\034\016\035\065\036\025\037\345\040" +
    "\056\041\043\044\336\062\334\071\064\074\033\001\002" +
    "\000\074\002\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4" +
    "\044\ufff4\062\ufff4\071\ufff4\074\ufff4\001\002\000\074\002" +
    "\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\025\uffe9\026" +
    "\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\044\uffe9\062" +
    "\uffe9\071\uffe9\074\uffe9\001\002\000\004\013\355\001\002" +
    "\000\074\002\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\044\uffee\062\uffee\071\uffee\074\uffee\001\002\000\004\066" +
    "\354\001\002\000\074\002\uffef\007\uffef\010\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef" +
    "\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\044\uffef\062\uffef\071\uffef\074\uffef\001\002" +
    "\000\074\002\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\044\ufff6\062\ufff6\071\ufff6\074\ufff6\001\002\000\074\002" +
    "\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\025\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\044\uffde\062" +
    "\uffde\071\uffde\074\uffde\001\002\000\074\002\uffe7\007\uffe7" +
    "\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\044\uffe7\062\uffe7\071\uffe7" +
    "\074\uffe7\001\002\000\074\002\uffeb\007\uffeb\010\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\044\uffeb\062\uffeb\071\uffeb\074\uffeb\001" +
    "\002\000\074\002\uffe3\007\uffe3\010\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\044\uffe3\062\uffe3\071\uffe3\074\uffe3\001\002\000\004" +
    "\066\353\001\002\000\074\002\ufff8\007\ufff8\010\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\044\ufff8\062\ufff8\071\ufff8\074\ufff8\001" +
    "\002\000\074\002\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\044\uffe5\062\uffe5\071\uffe5\074\uffe5\001\002\000\074" +
    "\002\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\044\uffe0" +
    "\062\uffe0\071\uffe0\074\uffe0\001\002\000\074\002\uffd8\007" +
    "\uffd8\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\044\uffd8\062\uffd8\071" +
    "\uffd8\074\uffd8\001\002\000\074\002\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020" +
    "\ufff2\021\ufff2\022\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\044\ufff2\062\ufff2\071\ufff2\074\ufff2" +
    "\001\002\000\074\002\uffdc\007\uffdc\010\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\044\uffdc\062\uffdc\071\uffdc\074\uffdc\001\002\000" +
    "\074\002\uffda\007\uffda\010\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\044" +
    "\uffda\062\uffda\071\uffda\074\uffda\001\002\000\004\057\356" +
    "\001\002\000\006\056\360\071\361\001\002\000\004\060" +
    "\372\001\002\000\006\060\uff6f\066\uff6f\001\002\000\004" +
    "\053\362\001\002\000\012\005\364\056\365\071\366\073" +
    "\363\001\002\000\006\060\uff6d\066\uff6d\001\002\000\006" +
    "\005\367\071\370\001\002\000\006\060\uff6e\066\uff6e\001" +
    "\002\000\006\060\uff6c\066\uff6c\001\002\000\006\060\uff6b" +
    "\066\uff6b\001\002\000\004\005\371\001\002\000\006\060" +
    "\uff6a\066\uff6a\001\002\000\004\066\373\001\002\000\074" +
    "\002\uff67\007\uff67\010\uff67\012\uff67\013\uff67\014\uff67\015" +
    "\uff67\016\uff67\017\uff67\020\uff67\021\uff67\022\uff67\025\uff67" +
    "\026\uff67\027\uff67\030\uff67\031\uff67\032\uff67\033\uff67\034" +
    "\uff67\035\uff67\036\uff67\037\uff67\040\uff67\041\uff67\044\uff67" +
    "\062\uff67\071\uff67\074\uff67\001\002\000\006\045\376\066" +
    "\375\001\002\000\074\002\uffb1\007\uffb1\010\uffb1\012\uffb1" +
    "\013\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021" +
    "\uffb1\022\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\044\uffb1\062\uffb1\071\uffb1\074\uffb1\001\002" +
    "\000\004\005\377\001\002\000\004\071\u0100\001\002\000" +
    "\004\005\u0101\001\002\000\004\066\u0102\001\002\000\074" +
    "\002\uffb0\007\uffb0\010\uffb0\012\uffb0\013\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\044\uffb0" +
    "\062\uffb0\071\uffb0\074\uffb0\001\002\000\004\022\u0108\001" +
    "\002\000\074\002\uff8c\007\uff8c\010\uff8c\012\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c" +
    "\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\044\uff8c\062\uff8c\071\uff8c\074\uff8c\001\002\000\004" +
    "\071\u0106\001\002\000\004\066\u0107\001\002\000\074\002" +
    "\uff8a\007\uff8a\010\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a" +
    "\016\uff8a\017\uff8a\020\uff8a\021\uff8a\022\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a" +
    "\035\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\044\uff8a\062" +
    "\uff8a\071\uff8a\074\uff8a\001\002\000\004\071\u0109\001\002" +
    "\000\004\066\u010a\001\002\000\074\002\uff8b\007\uff8b\010" +
    "\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\017\uff8b" +
    "\020\uff8b\021\uff8b\022\uff8b\025\uff8b\026\uff8b\027\uff8b\030" +
    "\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\044\uff8b\062\uff8b\071\uff8b\074" +
    "\uff8b\001\002\000\004\071\u010c\001\002\000\004\060\u010d" +
    "\001\002\000\004\061\u010e\001\002\000\004\042\u010f\001" +
    "\002\000\006\005\u0113\073\u0112\001\002\000\004\062\u0111" +
    "\001\002\000\074\002\uff5f\007\uff5f\010\uff5f\012\uff5f\013" +
    "\uff5f\014\uff5f\015\uff5f\016\uff5f\017\uff5f\020\uff5f\021\uff5f" +
    "\022\uff5f\025\uff5f\026\uff5f\027\uff5f\030\uff5f\031\uff5f\032" +
    "\uff5f\033\uff5f\034\uff5f\035\uff5f\036\uff5f\037\uff5f\040\uff5f" +
    "\041\uff5f\044\uff5f\062\uff5f\071\uff5f\074\uff5f\001\002\000" +
    "\004\072\u011b\001\002\000\004\071\u0114\001\002\000\004" +
    "\005\u0115\001\002\000\004\072\u0116\001\002\000\072\007" +
    "\037\010\022\012\050\013\034\014\041\015\035\016\020" +
    "\017\046\020\040\021\061\022\032\024\004\025\054\026" +
    "\021\027\026\030\030\031\055\032\044\033\066\034\016" +
    "\035\065\036\025\037\052\040\056\041\043\044\027\071" +
    "\064\074\033\001\002\000\070\007\037\010\022\012\050" +
    "\013\034\014\041\015\035\016\020\017\046\020\040\021" +
    "\061\022\032\025\054\026\021\027\026\030\030\031\055" +
    "\032\044\033\066\034\016\035\065\036\025\037\345\040" +
    "\056\041\043\044\u0118\071\064\074\033\001\002\000\004" +
    "\066\u0119\001\002\000\074\007\uffda\010\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\u010f\044\uffda\062\uff62\071\uffda\074\uffda\001" +
    "\002\000\004\062\uff60\001\002\000\072\007\037\010\022" +
    "\012\050\013\034\014\041\015\035\016\020\017\046\020" +
    "\040\021\061\022\032\024\004\025\054\026\021\027\026" +
    "\030\030\031\055\032\044\033\066\034\016\035\065\036" +
    "\025\037\052\040\056\041\043\044\027\071\064\074\033" +
    "\001\002\000\070\007\037\010\022\012\050\013\034\014" +
    "\041\015\035\016\020\017\046\020\040\021\061\022\032" +
    "\025\054\026\021\027\026\030\030\031\055\032\044\033" +
    "\066\034\016\035\065\036\025\037\345\040\056\041\043" +
    "\044\u011d\071\064\074\033\001\002\000\004\066\u011e\001" +
    "\002\000\074\007\uffda\010\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\025" +
    "\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda" +
    "\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042" +
    "\u010f\044\uffda\062\uff63\071\uffda\074\uffda\001\002\000\004" +
    "\062\uff61\001\002\000\006\015\u0123\071\u0122\001\002\000" +
    "\004\060\u0137\001\002\000\004\045\u0131\001\002\000\004" +
    "\071\u0124\001\002\000\004\045\u0125\001\002\000\004\073" +
    "\u0126\001\002\000\004\066\u0127\001\002\000\006\056\360" +
    "\071\361\001\002\000\004\066\u0129\001\002\000\006\055" +
    "\u012b\071\u012c\001\002\000\004\060\uff65\001\002\000\004" +
    "\071\u0130\001\002\000\006\054\u012d\055\u012e\001\002\000" +
    "\004\073\u012f\001\002\000\004\060\uff5d\001\002\000\004" +
    "\060\uff5e\001\002\000\004\060\uff5c\001\002\000\004\073" +
    "\u0132\001\002\000\004\066\u0133\001\002\000\006\056\360" +
    "\071\361\001\002\000\004\066\u0135\001\002\000\006\055" +
    "\u012b\071\u012c\001\002\000\004\060\uff64\001\002\000\004" +
    "\061\u0138\001\002\000\072\007\037\010\022\012\050\013" +
    "\034\014\041\015\035\016\020\017\046\020\040\021\061" +
    "\022\032\024\004\025\054\026\021\027\026\030\030\031" +
    "\055\032\044\033\066\034\016\035\065\036\025\037\052" +
    "\040\056\041\043\044\027\071\064\074\033\001\002\000" +
    "\072\007\037\010\022\012\050\013\034\014\041\015\035" +
    "\016\020\017\046\020\040\021\061\022\032\025\054\026" +
    "\021\027\026\030\030\031\055\032\044\033\066\034\016" +
    "\035\065\036\025\037\345\040\056\041\043\044\336\062" +
    "\u013a\071\064\074\033\001\002\000\074\002\uff66\007\uff66" +
    "\010\uff66\012\uff66\013\uff66\014\uff66\015\uff66\016\uff66\017" +
    "\uff66\020\uff66\021\uff66\022\uff66\025\uff66\026\uff66\027\uff66" +
    "\030\uff66\031\uff66\032\uff66\033\uff66\034\uff66\035\uff66\036" +
    "\uff66\037\uff66\040\uff66\041\uff66\044\uff66\062\uff66\071\uff66" +
    "\074\uff66\001\002\000\010\045\u013e\054\u013c\066\u013d\001" +
    "\002\000\004\073\u0157\001\002\000\074\002\uffae\007\uffae" +
    "\010\uffae\012\uffae\013\uffae\014\uffae\015\uffae\016\uffae\017" +
    "\uffae\020\uffae\021\uffae\022\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\044\uffae\062\uffae\071\uffae" +
    "\074\uffae\001\002\000\004\073\u013f\001\002\000\004\067" +
    "\u0140\001\002\000\004\073\u0141\001\002\000\014\046\u0145" +
    "\047\u0144\050\u0146\051\u0142\066\u0143\001\002\000\004\073" +
    "\u0153\001\002\000\074\002\uffac\007\uffac\010\uffac\012\uffac" +
    "\013\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\044\uffac\062\uffac\071\uffac\074\uffac\001\002" +
    "\000\004\073\u014f\001\002\000\004\073\u014b\001\002\000" +
    "\004\073\u0147\001\002\000\004\067\u0148\001\002\000\004" +
    "\073\u0149\001\002\000\004\066\u014a\001\002\000\074\002" +
    "\uffa8\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\025\uffa8\026" +
    "\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8" +
    "\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\044\uffa8\062" +
    "\uffa8\071\uffa8\074\uffa8\001\002\000\004\067\u014c\001\002" +
    "\000\004\073\u014d\001\002\000\004\066\u014e\001\002\000" +
    "\074\002\uffaa\007\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\025" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041\uffaa\044" +
    "\uffaa\062\uffaa\071\uffaa\074\uffaa\001\002\000\004\067\u0150" +
    "\001\002\000\004\073\u0151\001\002\000\004\066\u0152\001" +
    "\002\000\074\002\uffa9\007\uffa9\010\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022" +
    "\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\044\uffa9\062\uffa9\071\uffa9\074\uffa9\001\002\000\004" +
    "\067\u0154\001\002\000\004\073\u0155\001\002\000\004\066" +
    "\u0156\001\002\000\074\002\uffa7\007\uffa7\010\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021" +
    "\uffa7\022\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\044\uffa7\062\uffa7\071\uffa7\074\uffa7\001\002" +
    "\000\004\067\u0158\001\002\000\004\073\u0159\001\002\000" +
    "\004\066\u015a\001\002\000\074\002\uffad\007\uffad\010\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\025\uffad\026\uffad\027\uffad\030\uffad" +
    "\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037" +
    "\uffad\040\uffad\041\uffad\044\uffad\062\uffad\071\uffad\074\uffad" +
    "\001\002\000\010\045\u015e\054\u015c\066\u015d\001\002\000" +
    "\004\005\u0171\001\002\000\074\002\uffa6\007\uffa6\010\uffa6" +
    "\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\044\uffa6\062\uffa6\071\uffa6\074\uffa6" +
    "\001\002\000\006\005\u0160\073\u015f\001\002\000\004\067" +
    "\u0166\001\002\000\006\005\u0161\071\072\001\002\000\004" +
    "\066\u0165\001\002\000\004\005\u0163\001\002\000\004\066" +
    "\u0164\001\002\000\074\002\uffa2\007\uffa2\010\uffa2\012\uffa2" +
    "\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040" +
    "\uffa2\041\uffa2\044\uffa2\062\uffa2\071\uffa2\074\uffa2\001\002" +
    "\000\074\002\uffa4\007\uffa4\010\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\022\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\044\uffa4\062\uffa4\071\uffa4\074\uffa4\001\002\000\004\005" +
    "\u0167\001\002\000\004\071\072\001\002\000\004\005\u0169" +
    "\001\002\000\004\046\u016a\001\002\000\004\005\u016b\001" +
    "\002\000\004\071\072\001\002\000\004\005\u016d\001\002" +
    "\000\004\067\u016e\001\002\000\004\073\u016f\001\002\000" +
    "\004\066\u0170\001\002\000\074\002\uffa0\007\uffa0\010\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\044\uffa0\062\uffa0\071\uffa0\074\uffa0" +
    "\001\002\000\006\005\u0172\071\072\001\002\000\004\066" +
    "\u0176\001\002\000\004\005\u0174\001\002\000\004\066\u0175" +
    "\001\002\000\074\002\uffa3\007\uffa3\010\uffa3\012\uffa3\013" +
    "\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3" +
    "\022\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032" +
    "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3" +
    "\041\uffa3\044\uffa3\062\uffa3\071\uffa3\074\uffa3\001\002\000" +
    "\074\002\uffa5\007\uffa5\010\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\025" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\044" +
    "\uffa5\062\uffa5\071\uffa5\074\uffa5\001\002\000\004\071\u018e" +
    "\001\002\000\012\045\u017c\054\u0179\055\u017b\066\u017a\001" +
    "\002\000\004\073\u018c\001\002\000\074\002\uffd7\007\uffd7" +
    "\010\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\044\uffd7\062\uffd7\071\uffd7" +
    "\074\uffd7\001\002\000\004\066\u018b\001\002\000\004\073" +
    "\u017d\001\002\000\014\046\u0181\047\u0180\050\u0182\051\u017e" +
    "\066\u017f\001\002\000\004\073\u0189\001\002\000\074\002" +
    "\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\044\uffd5\062" +
    "\uffd5\071\uffd5\074\uffd5\001\002\000\004\073\u0187\001\002" +
    "\000\004\073\u0185\001\002\000\004\073\u0183\001\002\000" +
    "\004\066\u0184\001\002\000\074\002\uffbe\007\uffbe\010\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037" +
    "\uffbe\040\uffbe\041\uffbe\044\uffbe\062\uffbe\071\uffbe\074\uffbe" +
    "\001\002\000\004\066\u0186\001\002\000\074\002\uffc0\007" +
    "\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0" +
    "\036\uffc0\037\uffc0\040\uffc0\041\uffc0\044\uffc0\062\uffc0\071" +
    "\uffc0\074\uffc0\001\002\000\004\066\u0188\001\002\000\074" +
    "\002\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\044\uffbf" +
    "\062\uffbf\071\uffbf\074\uffbf\001\002\000\004\066\u018a\001" +
    "\002\000\074\002\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\044\uffbd\062\uffbd\071\uffbd\074\uffbd\001\002\000\074" +
    "\002\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\044\uffd3" +
    "\062\uffd3\071\uffd3\074\uffd3\001\002\000\004\066\u018d\001" +
    "\002\000\074\002\uffd6\007\uffd6\010\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\044\uffd6\062\uffd6\071\uffd6\074\uffd6\001\002\000\004" +
    "\066\u018f\001\002\000\074\002\uffd2\007\uffd2\010\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\040\uffd2\041\uffd2\044\uffd2\062\uffd2\071\uffd2\074\uffd2\001" +
    "\002\000\006\056\360\071\361\001\002\000\004\060\u0192" +
    "\001\002\000\004\061\u0193\001\002\000\072\007\037\010" +
    "\022\012\050\013\034\014\041\015\035\016\020\017\046" +
    "\020\040\021\061\022\032\024\004\025\054\026\021\027" +
    "\026\030\030\031\055\032\044\033\066\034\016\035\065" +
    "\036\025\037\052\040\056\041\043\044\027\071\064\074" +
    "\033\001\002\000\072\007\037\010\022\012\050\013\034" +
    "\014\041\015\035\016\020\017\046\020\040\021\061\022" +
    "\032\025\054\026\021\027\026\030\030\031\055\032\044" +
    "\033\066\034\016\035\065\036\025\037\345\040\056\041" +
    "\043\044\336\062\u0195\071\064\074\033\001\002\000\074" +
    "\002\uff68\007\uff68\010\uff68\012\uff68\013\uff68\014\uff68\015" +
    "\uff68\016\uff68\017\uff68\020\uff68\021\uff68\022\uff68\025\uff68" +
    "\026\uff68\027\uff68\030\uff68\031\uff68\032\uff68\033\uff68\034" +
    "\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041\uff68\044\uff68" +
    "\062\uff68\071\uff68\074\uff68\001\002\000\006\066\u019c\067" +
    "\u019d\001\002\000\004\071\072\001\002\000\004\066\u0199" +
    "\001\002\000\074\002\uff40\007\uff40\010\uff40\012\uff40\013" +
    "\uff40\014\uff40\015\uff40\016\uff40\017\uff40\020\uff40\021\uff40" +
    "\022\uff40\025\uff40\026\uff40\027\uff40\030\uff40\031\uff40\032" +
    "\uff40\033\uff40\034\uff40\035\uff40\036\uff40\037\uff40\040\uff40" +
    "\041\uff40\044\uff40\062\uff40\071\uff40\074\uff40\001\002\000" +
    "\004\005\u019b\001\002\000\074\002\uff3f\007\uff3f\010\uff3f" +
    "\012\uff3f\013\uff3f\014\uff3f\015\uff3f\016\uff3f\017\uff3f\020" +
    "\uff3f\021\uff3f\022\uff3f\025\uff3f\026\uff3f\027\uff3f\030\uff3f" +
    "\031\uff3f\032\uff3f\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037" +
    "\uff3f\040\uff3f\041\uff3f\044\uff3f\062\uff3f\071\uff3f\074\uff3f" +
    "\001\002\000\074\002\uff42\007\uff42\010\uff42\012\uff42\013" +
    "\uff42\014\uff42\015\uff42\016\uff42\017\uff42\020\uff42\021\uff42" +
    "\022\uff42\025\uff42\026\uff42\027\uff42\030\uff42\031\uff42\032" +
    "\uff42\033\uff42\034\uff42\035\uff42\036\uff42\037\uff42\040\uff42" +
    "\041\uff42\044\uff42\062\uff42\071\uff42\074\uff42\001\002\000" +
    "\004\073\u019e\001\002\000\004\066\u019f\001\002\000\074" +
    "\002\uff41\007\uff41\010\uff41\012\uff41\013\uff41\014\uff41\015" +
    "\uff41\016\uff41\017\uff41\020\uff41\021\uff41\022\uff41\025\uff41" +
    "\026\uff41\027\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034" +
    "\uff41\035\uff41\036\uff41\037\uff41\040\uff41\041\uff41\044\uff41" +
    "\062\uff41\071\uff41\074\uff41\001\002\000\004\071\u01c0\001" +
    "\002\000\004\015\u01b2\001\002\000\004\066\u01b1\001\002" +
    "\000\006\055\u01a4\071\u01a5\001\002\000\004\071\u01af\001" +
    "\002\000\012\045\u01a9\054\u01a6\055\u01a8\066\u01a7\001\002" +
    "\000\004\073\u01ad\001\002\000\074\002\uffca\007\uffca\010" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\044\uffca\062\uffca\071\uffca\074" +
    "\uffca\001\002\000\004\066\u01ac\001\002\000\004\073\u01aa" +
    "\001\002\000\004\066\u01ab\001\002\000\074\002\uffc8\007" +
    "\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\044\uffc8\062\uffc8\071" +
    "\uffc8\074\uffc8\001\002\000\074\002\uffc7\007\uffc7\010\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\044\uffc7\062\uffc7\071\uffc7\074\uffc7" +
    "\001\002\000\004\066\u01ae\001\002\000\074\002\uffc9\007" +
    "\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\044\uffc9\062\uffc9\071" +
    "\uffc9\074\uffc9\001\002\000\004\066\u01b0\001\002\000\074" +
    "\002\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\044\uffc6" +
    "\062\uffc6\071\uffc6\074\uffc6\001\002\000\074\002\uffcb\007" +
    "\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\044\uffcb\062\uffcb\071" +
    "\uffcb\074\uffcb\001\002\000\006\055\u01b3\071\u01b4\001\002" +
    "\000\004\071\u01be\001\002\000\012\045\u01b8\054\u01b5\055" +
    "\u01b7\066\u01b6\001\002\000\004\073\u01bc\001\002\000\074" +
    "\002\uffc5\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\044\uffc5" +
    "\062\uffc5\071\uffc5\074\uffc5\001\002\000\004\066\u01bb\001" +
    "\002\000\004\073\u01b9\001\002\000\004\066\u01ba\001\002" +
    "\000\074\002\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\044\uffc3\062\uffc3\071\uffc3\074\uffc3\001\002\000\074\002" +
    "\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\044\uffc2\062" +
    "\uffc2\071\uffc2\074\uffc2\001\002\000\004\066\u01bd\001\002" +
    "\000\074\002\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\044\uffc4\062\uffc4\071\uffc4\074\uffc4\001\002\000\004\066" +
    "\u01bf\001\002\000\074\002\uffc1\007\uffc1\010\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1" +
    "\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040" +
    "\uffc1\041\uffc1\044\uffc1\062\uffc1\071\uffc1\074\uffc1\001\002" +
    "\000\010\045\u01c3\054\u01c1\066\u01c2\001\002\000\004\073" +
    "\u01c8\001\002\000\074\002\uffb9\007\uffb9\010\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\044\uffb9\062\uffb9\071\uffb9\074\uffb9\001\002" +
    "\000\004\073\u01c4\001\002\000\004\067\u01c5\001\002\000" +
    "\004\073\u01c6\001\002\000\004\066\u01c7\001\002\000\074" +
    "\002\uffb7\007\uffb7\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\044\uffb7" +
    "\062\uffb7\071\uffb7\074\uffb7\001\002\000\004\067\u01c9\001" +
    "\002\000\004\073\u01ca\001\002\000\004\066\u01cb\001\002" +
    "\000\074\002\uffb8\007\uffb8\010\uffb8\012\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8" +
    "\044\uffb8\062\uffb8\071\uffb8\074\uffb8\001\002\000\004\071" +
    "\u01de\001\002\000\006\015\u01d5\071\u01d4\001\002\000\004" +
    "\071\u01cf\001\002\000\006\045\u01d1\066\u01d0\001\002\000" +
    "\074\002\uff93\007\uff93\010\uff93\012\uff93\013\uff93\014\uff93" +
    "\015\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93" +
    "\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\044" +
    "\uff93\062\uff93\071\uff93\074\uff93\001\002\000\004\073\u01d2" +
    "\001\002\000\004\066\u01d3\001\002\000\074\002\uff90\007" +
    "\uff90\010\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90" +
    "\017\uff90\020\uff90\021\uff90\022\uff90\025\uff90\026\uff90\027" +
    "\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90" +
    "\036\uff90\037\uff90\040\uff90\041\uff90\044\uff90\062\uff90\071" +
    "\uff90\074\uff90\001\002\000\076\002\uff8e\007\uff8e\010\uff8e" +
    "\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\017\uff8e\020" +
    "\uff8e\021\uff8e\022\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e" +
    "\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037" +
    "\uff8e\040\uff8e\041\uff8e\044\uff8e\045\u01db\062\uff8e\071\uff8e" +
    "\074\uff8e\001\002\000\004\071\u01d6\001\002\000\006\045" +
    "\u01d8\066\u01d7\001\002\000\074\002\uff92\007\uff92\010\uff92" +
    "\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\017\uff92\020" +
    "\uff92\021\uff92\022\uff92\025\uff92\026\uff92\027\uff92\030\uff92" +
    "\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037" +
    "\uff92\040\uff92\041\uff92\044\uff92\062\uff92\071\uff92\074\uff92" +
    "\001\002\000\004\073\u01d9\001\002\000\004\066\u01da\001" +
    "\002\000\074\002\uff91\007\uff91\010\uff91\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022" +
    "\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91" +
    "\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041" +
    "\uff91\044\uff91\062\uff91\071\uff91\074\uff91\001\002\000\004" +
    "\073\u01dc\001\002\000\004\066\u01dd\001\002\000\074\002" +
    "\uff8f\007\uff8f\010\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f" +
    "\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\025\uff8f\026" +
    "\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f" +
    "\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\044\uff8f\062" +
    "\uff8f\071\uff8f\074\uff8f\001\002\000\004\005\u01df\001\002" +
    "\000\074\002\uff8d\007\uff8d\010\uff8d\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d" +
    "\025\uff8d\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\033" +
    "\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\044\uff8d\062\uff8d\071\uff8d\074\uff8d\001\002\000\074\002" +
    "\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\044\uffdb\062" +
    "\uffdb\071\uffdb\074\uffdb\001\002\000\004\071\u01e4\001\002" +
    "\000\004\062\u01f0\001\002\000\006\062\u01ee\071\u01e4\001" +
    "\002\000\012\045\u01e6\062\uff77\070\u01e5\071\uff77\001\002" +
    "\000\004\071\u01ed\001\002\000\004\073\u01e7\001\002\000" +
    "\006\062\uff75\070\u01e8\001\002\000\004\071\u01e4\001\002" +
    "\000\004\062\uff74\001\002\000\004\071\u01e4\001\002\000" +
    "\004\062\uff73\001\002\000\006\062\uff76\071\uff76\001\002" +
    "\000\010\062\uff77\070\u01e5\071\uff77\001\002\000\004\066" +
    "\u01ef\001\002\000\074\002\uff72\007\uff72\010\uff72\012\uff72" +
    "\013\uff72\014\uff72\015\uff72\016\uff72\017\uff72\020\uff72\021" +
    "\uff72\022\uff72\025\uff72\026\uff72\027\uff72\030\uff72\031\uff72" +
    "\032\uff72\033\uff72\034\uff72\035\uff72\036\uff72\037\uff72\040" +
    "\uff72\041\uff72\044\uff72\062\uff72\071\uff72\074\uff72\001\002" +
    "\000\004\066\u01f1\001\002\000\074\002\uff71\007\uff71\010" +
    "\uff71\012\uff71\013\uff71\014\uff71\015\uff71\016\uff71\017\uff71" +
    "\020\uff71\021\uff71\022\uff71\025\uff71\026\uff71\027\uff71\030" +
    "\uff71\031\uff71\032\uff71\033\uff71\034\uff71\035\uff71\036\uff71" +
    "\037\uff71\040\uff71\041\uff71\044\uff71\062\uff71\071\uff71\074" +
    "\uff71\001\002\000\004\005\u01f3\001\002\000\004\071\072" +
    "\001\002\000\004\005\u01f5\001\002\000\006\053\u01f8\066" +
    "\u01f6\001\002\000\074\002\uff4f\007\uff4f\010\uff4f\012\uff4f" +
    "\013\uff4f\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021" +
    "\uff4f\022\uff4f\025\uff4f\026\uff4f\027\uff4f\030\uff4f\031\uff4f" +
    "\032\uff4f\033\uff4f\034\uff4f\035\uff4f\036\uff4f\037\uff4f\040" +
    "\uff4f\041\uff4f\044\uff4f\062\uff4f\071\uff4f\074\uff4f\001\002" +
    "\000\004\066\u01ff\001\002\000\006\005\u01f9\071\u01fa\001" +
    "\002\000\004\071\072\001\002\000\006\053\u01f8\066\uff53" +
    "\001\002\000\004\066\uff51\001\002\000\004\005\u01fd\001" +
    "\002\000\006\053\u01f8\066\uff52\001\002\000\004\066\uff50" +
    "\001\002\000\074\002\uff4e\007\uff4e\010\uff4e\012\uff4e\013" +
    "\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e" +
    "\022\uff4e\025\uff4e\026\uff4e\027\uff4e\030\uff4e\031\uff4e\032" +
    "\uff4e\033\uff4e\034\uff4e\035\uff4e\036\uff4e\037\uff4e\040\uff4e" +
    "\041\uff4e\044\uff4e\062\uff4e\071\uff4e\074\uff4e\001\002\000" +
    "\006\002\000\071\u0202\001\002\000\004\002\ufffc\001\002" +
    "\000\004\072\u0203\001\002\000\072\007\037\010\022\012" +
    "\050\013\034\014\041\015\035\016\020\017\046\020\040" +
    "\021\061\022\032\024\004\025\054\026\021\027\026\030" +
    "\030\031\055\032\044\033\066\034\016\035\065\036\025" +
    "\037\052\040\056\041\043\044\027\071\064\074\033\001" +
    "\002\000\072\002\uff44\007\037\010\022\012\050\013\034" +
    "\014\041\015\035\016\020\017\046\020\040\021\061\022" +
    "\032\025\054\026\021\027\026\030\030\031\055\032\044" +
    "\033\066\034\016\035\065\036\025\037\345\040\056\041" +
    "\043\044\336\071\064\074\033\001\002\000\006\056\360" +
    "\071\361\001\002\000\004\060\u0207\001\002\000\004\061" +
    "\u0208\001\002\000\072\007\037\010\022\012\050\013\034" +
    "\014\041\015\035\016\020\017\046\020\040\021\061\022" +
    "\032\024\004\025\054\026\021\027\026\030\030\031\055" +
    "\032\044\033\066\034\016\035\065\036\025\037\052\040" +
    "\056\041\043\044\027\071\064\074\033\001\002\000\072" +
    "\007\037\010\022\012\050\013\034\014\041\015\035\016" +
    "\020\017\046\020\040\021\061\022\032\025\054\026\021" +
    "\027\026\030\030\031\055\032\044\033\066\034\016\035" +
    "\065\036\025\037\345\040\056\041\043\044\336\062\u020a" +
    "\071\064\074\033\001\002\000\076\002\uff70\007\uff70\010" +
    "\uff70\011\u020b\012\uff70\013\uff70\014\uff70\015\uff70\016\uff70" +
    "\017\uff70\020\uff70\021\uff70\022\uff70\025\uff70\026\uff70\027" +
    "\uff70\030\uff70\031\uff70\032\uff70\033\uff70\034\uff70\035\uff70" +
    "\036\uff70\037\uff70\040\uff70\041\uff70\044\uff70\062\uff70\071" +
    "\uff70\074\uff70\001\002\000\004\061\u020c\001\002\000\072" +
    "\007\037\010\022\012\050\013\034\014\041\015\035\016" +
    "\020\017\046\020\040\021\061\022\032\024\004\025\054" +
    "\026\021\027\026\030\030\031\055\032\044\033\066\034" +
    "\016\035\065\036\025\037\052\040\056\041\043\044\027" +
    "\071\064\074\033\001\002\000\072\007\037\010\022\012" +
    "\050\013\034\014\041\015\035\016\020\017\046\020\040" +
    "\021\061\022\032\025\054\026\021\027\026\030\030\031" +
    "\055\032\044\033\066\034\016\035\065\036\025\037\345" +
    "\040\056\041\043\044\336\062\u020e\071\064\074\033\001" +
    "\002\000\074\002\uff69\007\uff69\010\uff69\012\uff69\013\uff69" +
    "\014\uff69\015\uff69\016\uff69\017\uff69\020\uff69\021\uff69\022" +
    "\uff69\025\uff69\026\uff69\027\uff69\030\uff69\031\uff69\032\uff69" +
    "\033\uff69\034\uff69\035\uff69\036\uff69\037\uff69\040\uff69\041" +
    "\uff69\044\uff69\062\uff69\071\uff69\074\uff69\001\002\000\004" +
    "\071\u0228\001\002\000\006\022\u021d\071\u021e\001\002\000" +
    "\004\071\u0218\001\002\000\004\071\u0213\001\002\000\006" +
    "\045\u0215\066\u0214\001\002\000\074\002\uff9f\007\uff9f\010" +
    "\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f" +
    "\020\uff9f\021\uff9f\022\uff9f\025\uff9f\026\uff9f\027\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\044\uff9f\062\uff9f\071\uff9f\074" +
    "\uff9f\001\002\000\004\073\u0216\001\002\000\004\066\u0217" +
    "\001\002\000\074\002\uff9a\007\uff9a\010\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\044\uff9a\062\uff9a\071\uff9a\074\uff9a\001\002\000" +
    "\006\045\u021a\066\u0219\001\002\000\074\002\uff9d\007\uff9d" +
    "\010\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\021\uff9d\022\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035\uff9d\036" +
    "\uff9d\037\uff9d\040\uff9d\041\uff9d\044\uff9d\062\uff9d\071\uff9d" +
    "\074\uff9d\001\002\000\004\073\u021b\001\002\000\004\066" +
    "\u021c\001\002\000\074\002\uff98\007\uff98\010\uff98\012\uff98" +
    "\013\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\044\uff98\062\uff98\071\uff98\074\uff98\001\002" +
    "\000\004\071\u0223\001\002\000\006\045\u0220\066\u021f\001" +
    "\002\000\074\002\uff9c\007\uff9c\010\uff9c\012\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\044\uff9c\062\uff9c\071\uff9c\074\uff9c\001\002\000\004" +
    "\073\u0221\001\002\000\004\066\u0222\001\002\000\074\002" +
    "\uff97\007\uff97\010\uff97\012\uff97\013\uff97\014\uff97\015\uff97" +
    "\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\044\uff97\062" +
    "\uff97\071\uff97\074\uff97\001\002\000\006\045\u0225\066\u0224" +
    "\001\002\000\074\002\uff9e\007\uff9e\010\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032" +
    "\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e" +
    "\041\uff9e\044\uff9e\062\uff9e\071\uff9e\074\uff9e\001\002\000" +
    "\004\073\u0226\001\002\000\004\066\u0227\001\002\000\074" +
    "\002\uff99\007\uff99\010\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\025\uff99" +
    "\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\044\uff99" +
    "\062\uff99\071\uff99\074\uff99\001\002\000\006\045\u022a\066" +
    "\u0229\001\002\000\074\002\uff9b\007\uff9b\010\uff9b\012\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\044\uff9b\062\uff9b\071\uff9b\074\uff9b\001\002" +
    "\000\004\005\u022b\001\002\000\004\071\u022c\001\002\000" +
    "\004\005\u022d\001\002\000\004\066\u022e\001\002\000\074" +
    "\002\uff96\007\uff96\010\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\025\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034" +
    "\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\044\uff96" +
    "\062\uff96\071\uff96\074\uff96\001\002\000\010\045\u0232\054" +
    "\u0230\066\u0231\001\002\000\004\073\u024b\001\002\000\074" +
    "\002\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\044\uffbc" +
    "\062\uffbc\071\uffbc\074\uffbc\001\002\000\004\073\u0233\001" +
    "\002\000\004\067\u0234\001\002\000\004\073\u0235\001\002" +
    "\000\014\046\u0239\047\u0238\050\u023a\051\u0236\066\u0237\001" +
    "\002\000\004\073\u0247\001\002\000\074\002\uffba\007\uffba" +
    "\010\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\044\uffba\062\uffba\071\uffba" +
    "\074\uffba\001\002\000\004\073\u0243\001\002\000\004\073" +
    "\u023f\001\002\000\004\073\u023b\001\002\000\004\067\u023c" +
    "\001\002\000\004\073\u023d\001\002\000\004\066\u023e\001" +
    "\002\000\074\002\uffb3\007\uffb3\010\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041" +
    "\uffb3\044\uffb3\062\uffb3\071\uffb3\074\uffb3\001\002\000\004" +
    "\067\u0240\001\002\000\004\073\u0241\001\002\000\004\066" +
    "\u0242\001\002\000\074\002\uffb5\007\uffb5\010\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021" +
    "\uffb5\022\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\044\uffb5\062\uffb5\071\uffb5\074\uffb5\001\002" +
    "\000\004\067\u0244\001\002\000\004\073\u0245\001\002\000" +
    "\004\066\u0246\001\002\000\074\002\uffb4\007\uffb4\010\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020" +
    "\uffb4\021\uffb4\022\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\044\uffb4\062\uffb4\071\uffb4\074\uffb4" +
    "\001\002\000\004\067\u0248\001\002\000\004\073\u0249\001" +
    "\002\000\004\066\u024a\001\002\000\074\002\uffb2\007\uffb2" +
    "\010\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\017" +
    "\uffb2\020\uffb2\021\uffb2\022\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\044\uffb2\062\uffb2\071\uffb2" +
    "\074\uffb2\001\002\000\004\067\u024c\001\002\000\004\073" +
    "\u024d\001\002\000\004\066\u024e\001\002\000\074\002\uffbb" +
    "\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\044\uffbb\062\uffbb" +
    "\071\uffbb\074\uffbb\001\002\000\004\005\u0250\001\002\000" +
    "\004\071\072\001\002\000\004\005\u0252\001\002\000\004" +
    "\070\u0253\001\002\000\004\071\100\001\002\000\004\060" +
    "\u0255\001\002\000\004\066\u0256\001\002\000\074\002\uff55" +
    "\007\uff55\010\uff55\012\uff55\013\uff55\014\uff55\015\uff55\016" +
    "\uff55\017\uff55\020\uff55\021\uff55\022\uff55\025\uff55\026\uff55" +
    "\027\uff55\030\uff55\031\uff55\032\uff55\033\uff55\034\uff55\035" +
    "\uff55\036\uff55\037\uff55\040\uff55\041\uff55\044\uff55\062\uff55" +
    "\071\uff55\074\uff55\001\002\000\004\002\001\001\002\000" +
    "\004\060\u0259\001\002\000\004\061\u025a\001\002\000\072" +
    "\007\037\010\022\012\050\013\034\014\041\015\035\016" +
    "\020\017\046\020\040\021\061\022\032\024\004\025\054" +
    "\026\021\027\026\030\030\031\055\032\044\033\066\034" +
    "\016\035\065\036\025\037\052\040\056\041\043\044\027" +
    "\071\064\074\033\001\002\000\072\007\037\010\022\012" +
    "\050\013\034\014\041\015\035\016\020\017\046\020\040" +
    "\021\061\022\032\025\054\026\021\027\026\030\030\031" +
    "\055\032\044\033\066\034\016\035\065\036\025\037\345" +
    "\040\056\041\043\044\336\062\u025c\071\064\074\033\001" +
    "\002\000\006\002\uffff\071\u0202\001\002\000\004\002\ufffb" +
    "\001\002\000\004\057\u0267\001\002\000\004\065\u0260\001" +
    "\002\000\004\057\u0261\001\002\000\004\060\u0262\001\002" +
    "\000\004\061\u0263\001\002\000\072\007\037\010\022\012" +
    "\050\013\034\014\041\015\035\016\020\017\046\020\040" +
    "\021\061\022\032\024\004\025\054\026\021\027\026\030" +
    "\030\031\055\032\044\033\066\034\016\035\065\036\025" +
    "\037\052\040\056\041\043\044\027\071\064\074\033\001" +
    "\002\000\072\007\037\010\022\012\050\013\034\014\041" +
    "\015\035\016\020\017\046\020\040\021\061\022\032\025" +
    "\054\026\021\027\026\030\030\031\055\032\044\033\066" +
    "\034\016\035\065\036\025\037\345\040\056\041\043\044" +
    "\336\062\u0265\071\064\074\033\001\002\000\006\002\ufffe" +
    "\071\u0202\001\002\000\004\002\ufffa\001\002\000\004\060" +
    "\u0268\001\002\000\004\061\u0269\001\002\000\072\007\037" +
    "\010\022\012\050\013\034\014\041\015\035\016\020\017" +
    "\046\020\040\021\061\022\032\024\004\025\054\026\021" +
    "\027\026\030\030\031\055\032\044\033\066\034\016\035" +
    "\065\036\025\037\052\040\056\041\043\044\027\071\064" +
    "\074\033\001\002\000\072\007\037\010\022\012\050\013" +
    "\034\014\041\015\035\016\020\017\046\020\040\021\061" +
    "\022\032\025\054\026\021\027\026\030\030\031\055\032" +
    "\044\033\066\034\016\035\065\036\025\037\345\040\056" +
    "\041\043\044\336\062\u026b\071\064\074\033\001\002\000" +
    "\006\002\ufffd\071\u0202\001\002\000\004\002\ufff9\001\002" +
    "\000\004\061\u026e\001\002\000\034\007\037\015\035\016" +
    "\020\017\046\020\040\021\061\022\032\025\054\026\021" +
    "\030\030\031\055\032\044\071\064\001\002\000\004\062" +
    "\u0272\001\002\000\036\007\037\015\035\016\020\017\046" +
    "\020\040\021\061\022\032\025\054\026\021\030\030\031" +
    "\055\032\044\062\uff4d\071\064\001\002\000\004\062\uff4c" +
    "\001\002\000\004\066\u0273\001\002\000\076\002\uff45\007" +
    "\uff45\010\uff45\012\uff45\013\uff45\014\uff45\015\uff45\016\uff45" +
    "\017\uff45\020\uff45\021\uff45\022\uff45\025\uff45\026\uff45\027" +
    "\uff45\030\uff45\031\uff45\032\uff45\033\uff45\034\uff45\035\uff45" +
    "\036\uff45\037\uff45\040\uff45\041\uff45\044\uff45\062\uff45\065" +
    "\uff45\071\uff45\074\uff45\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0271\000\006\002\006\027\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\022\004\052\006\035\007\014" +
    "\010\062\011\030\012\023\017\046\020\016\022\044\023" +
    "\056\024\050\027\066\031\041\034\057\036\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\004\345\006\337\007\331\010\351\011\336\012\334\017" +
    "\342\020\332\022\341\023\346\024\343\031\340\034\347" +
    "\036\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u0103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\072\001\001\000\004\016\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\205" +
    "\001\001\000\002\001\001\000\004\016\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\213\001\001\000" +
    "\002\001\001\000\004\030\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\330\004\052\006\035\007\014\010\062\011\030" +
    "\012\023\017\046\020\016\022\044\023\056\024\050\027" +
    "\066\031\041\034\057\036\061\001\001\000\036\004\345" +
    "\006\337\007\331\010\351\011\336\012\334\017\342\020" +
    "\332\022\341\023\346\024\343\031\340\034\347\036\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\u0116\004\052\006\035\007\014\010\062\011\030" +
    "\012\023\017\046\020\016\022\044\023\056\024\050\027" +
    "\066\031\041\034\057\036\061\001\001\000\036\004\345" +
    "\006\337\007\331\010\351\011\336\012\334\017\342\020" +
    "\332\022\341\023\346\024\343\031\340\034\347\036\350" +
    "\001\001\000\002\001\001\000\004\025\u0119\001\001\000" +
    "\002\001\001\000\042\003\u011b\004\052\006\035\007\014" +
    "\010\062\011\030\012\023\017\046\020\016\022\044\023" +
    "\056\024\050\027\066\031\041\034\057\036\061\001\001" +
    "\000\036\004\345\006\337\007\331\010\351\011\336\012" +
    "\334\017\342\020\332\022\341\023\346\024\343\031\340" +
    "\034\347\036\350\001\001\000\002\001\001\000\004\025" +
    "\u011e\001\001\000\002\001\001\000\004\014\u0120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0127\001\001\000\002\001\001\000\004\005\u0129\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u0133\001\001\000\002\001\001\000\004\005\u0135\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\u0138" +
    "\004\052\006\035\007\014\010\062\011\030\012\023\017" +
    "\046\020\016\022\044\023\056\024\050\027\066\031\041" +
    "\034\057\036\061\001\001\000\036\004\345\006\337\007" +
    "\331\010\351\011\336\012\334\017\342\020\332\022\341" +
    "\023\346\024\343\031\340\034\347\036\350\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u0161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u0167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u016b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u0172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0190\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\u0193\004\052\006\035\007\014\010\062" +
    "\011\030\012\023\017\046\020\016\022\044\023\056\024" +
    "\050\027\066\031\041\034\057\036\061\001\001\000\036" +
    "\004\345\006\337\007\331\010\351\011\336\012\334\017" +
    "\342\020\332\022\341\023\346\024\343\031\340\034\347" +
    "\036\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u0199\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\u01e2\033\u01e1\001\001\000\002\001\001\000\006\032" +
    "\u01e9\033\u01ea\001\001\000\002\001\001\000\004\032\u01eb" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\u01e9\033\u01e8\001\001\000\002\001\001\000\006\032\u01e9" +
    "\033\u01ea\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\u01f3\001\001\000\002\001\001\000\004\021\u01f6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u01fb\001\001\000\004\021\u01fa\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u01fd\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\u0200\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\003\u0203\004" +
    "\052\006\035\007\014\010\062\011\030\012\023\017\046" +
    "\020\016\022\044\023\056\024\050\027\066\031\041\034" +
    "\057\036\061\001\001\000\036\004\345\006\337\007\331" +
    "\010\351\011\336\012\334\017\342\020\332\022\341\023" +
    "\346\024\343\031\340\034\347\036\350\001\001\000\004" +
    "\013\u0205\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\u0208\004\052\006\035\007\014\010\062\011\030" +
    "\012\023\017\046\020\016\022\044\023\056\024\050\027" +
    "\066\031\041\034\057\036\061\001\001\000\036\004\345" +
    "\006\337\007\331\010\351\011\336\012\334\017\342\020" +
    "\332\022\341\023\346\024\343\031\340\034\347\036\350" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\003" +
    "\u020c\004\052\006\035\007\014\010\062\011\030\012\023" +
    "\017\046\020\016\022\044\023\056\024\050\027\066\031" +
    "\041\034\057\036\061\001\001\000\036\004\345\006\337" +
    "\007\331\010\351\011\336\012\334\017\342\020\332\022" +
    "\341\023\346\024\343\031\340\034\347\036\350\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u0250\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u0253\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\u025a" +
    "\004\052\006\035\007\014\010\062\011\030\012\023\017" +
    "\046\020\016\022\044\023\056\024\050\027\066\031\041" +
    "\034\057\036\061\001\001\000\036\004\345\006\337\007" +
    "\331\010\351\011\336\012\334\017\342\020\332\022\341" +
    "\023\346\024\343\031\340\034\347\036\350\001\001\000" +
    "\004\035\u025c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\u0263\004\052\006\035\007\014" +
    "\010\062\011\030\012\023\017\046\020\016\022\044\023" +
    "\056\024\050\027\066\031\041\034\057\036\061\001\001" +
    "\000\036\004\345\006\337\007\331\010\351\011\336\012" +
    "\334\017\342\020\332\022\341\023\346\024\343\031\340" +
    "\034\347\036\350\001\001\000\004\035\u0265\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\003\u0269\004\052\006\035\007\014\010\062\011\030\012" +
    "\023\017\046\020\016\022\044\023\056\024\050\027\066" +
    "\031\041\034\057\036\061\001\001\000\036\004\345\006" +
    "\337\007\331\010\351\011\336\012\334\017\342\020\332" +
    "\022\341\023\346\024\343\031\340\034\347\036\350\001" +
    "\001\000\004\035\u026b\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\u026f\026\u026e\001\001\000\002\001" +
    "\001\000\006\004\u026f\026\u0270\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // RETURN ::= Return Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // RETURN ::= Return Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // RETURN ::= Return Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // RETURN ::= Return Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // GOTO ::= GoTo Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GOTO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // GOTOSENT ::= Identificador Dos_puntos SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GOTOSENT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // STRUCT ::= Struct Identificador Llave_a DECLARACION_STRUCT Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // VARIABLES_STRUCT ::= Numero Punto Numero Coma VARIABLES_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES_STRUCT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // VARIABLES_STRUCT ::= Comillas CADENA Comillas Coma VARIABLES_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES_STRUCT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // VARIABLES_STRUCT ::= Numero Coma VARIABLES_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES_STRUCT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // VARIABLES_STRUCT ::= Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES_STRUCT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // VARIABLES_STRUCT ::= Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES_STRUCT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // VARIABLES_STRUCT ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLES_STRUCT",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // DECLARACION_STRUCT ::= DECLARACION DECLARACION_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // DECLARACION_STRUCT ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // COUT ::= Cout Op_relacional Comillas CADENA Comillas SENTENCIACOUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // COUT ::= Cout Op_relacional Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SENTENCIACOUT ::= Op_relacional Comillas CADENA Comillas SENTENCIACOUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SENTENCIACOUT ::= Op_relacional Identificador SENTENCIACOUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SENTENCIACOUT ::= Op_relacional Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // SENTENCIACOUT ::= Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // CIN ::= Cin Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // SCANF ::= ScanF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCANF",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // PRINTF ::= PrintF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // PRINTF ::= PrintF Parent_a Comillas CADENA Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // CADENA ::= Identificador CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // CADENA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DECLARACIONV ::= Identificador Coma DECLARACIONV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DECLARACIONV ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SENTENCIA_CASE ::= Case Comillas Identificador Comillas Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SENTENCIA_CASE ::= Case Comillas Identificador Comillas Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // SENTENCIA_FOR ::= Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ENUM ::= Enum Llave_a ELEMENTOS_DECLARACION Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUM",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ENUM ::= Enum Llave_a ELEMENTOS Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENUM",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ELEMENTOS_DECLARACION ::= ELEMENTOS ELEMENTOS_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_DECLARACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ELEMENTOS_DECLARACION ::= Identificador Igual Numero Coma ELEMENTOS_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_DECLARACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ELEMENTOS_DECLARACION ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTOS_DECLARACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ELEMENTOS ::= Identificador Coma ELEMENTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ELEMENTOS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARACION ::= Identificador Igual Numero Punto Comillas CADENA Comillas Suma Comillas CADENA Comillas Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION ::= Identificador Igual Numero Punto Numero Division Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARACION ::= Identificador Igual Numero Punto Numero Multiplicacion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARACION ::= Identificador Igual Numero Punto Numero Resta Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARACION ::= Identificador Igual Numero Punto Numero Suma Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARACION ::= Identificador Igual Numero Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARACION ::= Identificador Igual Numero Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECLARACION ::= Identificador Igual Numero Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECLARACION ::= Identificador Igual Numero Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION ::= Identificador Igual Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION ::= Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION ::= Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION ::= Identificador Igual Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION ::= Identificador Op_atribucion Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARACION ::= Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARACION ::= Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARACION ::= Identificador Op_atribucion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARACION ::= Identificador Identificador Igual Llave_a VARIABLES_STRUCT Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARACION ::= TypeDef Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARACION ::= TypeDef Unsigned Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARACION ::= TypeDef STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARACION ::= Extern Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARACION ::= Extern Const Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARACION ::= Extern Const Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARACION ::= Extern Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARACION ::= Extern Const Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARACION ::= Extern Const Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARACION ::= Extern Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION ::= Register Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION ::= Register Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARACION ::= Unsigned Char Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARACION ::= Unsigned Long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION ::= Unsigned Short Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARACION ::= Unsigned Long Long Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARACION ::= Unsigned Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARACION ::= Unsigned Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION ::= Unsigned Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION ::= Unsigned Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARACION ::= Unsigned Long Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARACION ::= Unsigned Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARACION ::= Cadena Identificador Igual Numero Punto Comillas CADENA Comillas Suma Comillas CADENA Comillas Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARACION ::= Const Cadena Identificador Igual Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARACION ::= Cadena Identificador Igual Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION ::= Cadena Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARACION ::= Float Identificador Igual Numero Punto Numero Division Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARACION ::= Float Identificador Igual Numero Punto Numero Multiplicacion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARACION ::= Float Identificador Igual Numero Punto Numero Resta Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACION ::= Float Identificador Igual Numero Punto Numero Suma Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACION ::= Const Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION ::= Float Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARACION ::= Const Char Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARACION ::= Char Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARACION ::= Double Identificador Igual Numero Punto Numero Division Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARACION ::= Double Identificador Igual Numero Punto Numero Multiplicacion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARACION ::= Double Identificador Igual Numero Punto Numero Resta Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION ::= Double Identificador Igual Numero Punto Numero Suma Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION ::= Const Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION ::= Long Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARACION ::= Long Double Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARACION ::= Long Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= Double Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION ::= Int Identificador Igual Numero Division Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= Int Identificador Igual Numero Multiplicacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= Int Identificador Igual Numero Resta Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= Int Identificador Igual Numero Suma Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Long Long Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Long Long Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Long Long Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Long Long Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Long Long Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Long Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Long Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Long Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Long Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Long Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Short Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Short Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Short Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Short Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Short Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Const Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= SENTENCIA GOTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= GOTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= SENTENCIA Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= Continue P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= SENTENCIA RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= SENTENCIA ENUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= ENUM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= STRUCT Main Parent_a Parent_c Llave_a SENTENCIA Llave_c GOTOSENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= STRUCT Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c GOTOSENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c GOTOSENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c GOTOSENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= STRUCT Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= STRUCT Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

