
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 15 21:50:54 COT 2021
//----------------------------------------------------

package AnalizadorLex;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 15 21:50:54 COT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\005" +
    "\000\002\004\007\000\002\004\011\000\002\004\007\000" +
    "\002\004\011\000\002\004\006\000\002\004\006\000\002" +
    "\004\010\000\002\004\010\000\002\004\011\000\002\004" +
    "\011\000\002\006\011\000\002\012\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\006\000" +
    "\002\012\007\000\002\007\015\000\002\010\011\000\002" +
    "\011\011\000\002\013\012\000\002\013\011\000\002\024" +
    "\010\000\002\024\012\000\002\024\011\000\002\024\013" +
    "\000\002\023\011\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\014\003\000\002\014\005\000\002" +
    "\015\003\000\002\015\004\000\002\016\011\000\002\016" +
    "\013\000\002\017\013\000\002\021\006\000\002\020\004" +
    "\000\002\020\006\000\002\020\005\000\002\020\007\000" +
    "\002\022\010\000\002\022\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\006\015\006\065\004\001\002\000\004\057" +
    "\273\001\002\000\004\002\272\001\002\000\004\065\007" +
    "\001\002\000\004\057\010\001\002\000\004\060\011\001" +
    "\002\000\004\061\012\001\002\000\026\006\025\007\030" +
    "\010\032\013\036\014\013\033\027\034\031\035\026\036" +
    "\033\041\034\001\002\000\004\057\237\001\002\000\020" +
    "\006\ufff7\007\ufff7\010\ufff7\013\ufff7\014\ufff7\044\ufff7\062" +
    "\ufff7\001\002\000\020\006\ufff3\007\ufff3\010\ufff3\013\ufff3" +
    "\014\ufff3\044\ufff3\062\ufff3\001\002\000\020\006\ufffd\007" +
    "\ufffd\010\ufffd\013\ufffd\014\ufffd\044\ufffd\062\ufffd\001\002" +
    "\000\020\006\ufff2\007\ufff2\010\ufff2\013\ufff2\014\ufff2\044" +
    "\ufff2\062\ufff2\001\002\000\016\006\025\007\030\010\032" +
    "\013\036\014\013\062\236\001\002\000\020\006\ufff0\007" +
    "\ufff0\010\ufff0\013\ufff0\014\ufff0\044\ufff0\062\ufff0\001\002" +
    "\000\020\006\ufffb\007\ufffb\010\ufffb\013\ufffb\014\ufffb\044" +
    "\ufffb\062\ufffb\001\002\000\020\006\ufff4\007\ufff4\010\ufff4" +
    "\013\ufff4\014\ufff4\044\ufff4\062\ufff4\001\002\000\020\006" +
    "\ufff9\007\ufff9\010\ufff9\013\ufff9\014\ufff9\044\ufff9\062\ufff9" +
    "\001\002\000\006\055\214\071\213\001\002\000\004\053" +
    "\210\001\002\000\004\057\176\001\002\000\004\071\157" +
    "\001\002\000\004\057\144\001\002\000\004\057\132\001" +
    "\002\000\004\053\112\001\002\000\004\057\065\001\002" +
    "\000\020\006\ufff1\007\ufff1\010\ufff1\013\ufff1\014\ufff1\044" +
    "\ufff1\062\ufff1\001\002\000\004\057\040\001\002\000\020" +
    "\006\ufff5\007\ufff5\010\ufff5\013\ufff5\014\ufff5\044\ufff5\062" +
    "\ufff5\001\002\000\006\056\042\071\043\001\002\000\004" +
    "\060\054\001\002\000\006\060\uffe3\066\uffe3\001\002\000" +
    "\004\053\044\001\002\000\012\005\046\056\047\071\050" +
    "\073\045\001\002\000\006\060\uffe1\066\uffe1\001\002\000" +
    "\006\005\051\071\052\001\002\000\006\060\uffe2\066\uffe2" +
    "\001\002\000\006\060\uffe0\066\uffe0\001\002\000\006\060" +
    "\uffdf\066\uffdf\001\002\000\004\005\053\001\002\000\006" +
    "\060\uffde\066\uffde\001\002\000\004\061\055\001\002\000" +
    "\026\006\025\007\030\010\032\013\036\014\013\033\027" +
    "\034\031\035\026\036\033\041\034\001\002\000\016\006" +
    "\025\007\030\010\032\013\036\014\013\062\064\001\002" +
    "\000\020\006\ufff8\007\ufff8\010\ufff8\013\ufff8\014\ufff8\044" +
    "\ufff8\062\ufff8\001\002\000\020\006\ufff6\007\ufff6\010\ufff6" +
    "\013\ufff6\014\ufff6\044\ufff6\062\ufff6\001\002\000\020\006" +
    "\ufffe\007\ufffe\010\ufffe\013\ufffe\014\ufffe\044\ufffe\062\ufffe" +
    "\001\002\000\020\006\ufffa\007\ufffa\010\ufffa\013\ufffa\014" +
    "\ufffa\044\ufffa\062\ufffa\001\002\000\020\006\ufffc\007\ufffc" +
    "\010\ufffc\013\ufffc\014\ufffc\044\ufffc\062\ufffc\001\002\000" +
    "\020\006\uffdc\007\uffdc\010\uffdc\013\uffdc\014\uffdc\044\uffdc" +
    "\062\uffdc\001\002\000\004\071\066\001\002\000\004\060" +
    "\067\001\002\000\004\061\070\001\002\000\004\042\071" +
    "\001\002\000\006\005\075\073\074\001\002\000\004\062" +
    "\073\001\002\000\020\006\uffd4\007\uffd4\010\uffd4\013\uffd4" +
    "\014\uffd4\044\uffd4\062\uffd4\001\002\000\004\072\105\001" +
    "\002\000\004\071\076\001\002\000\004\005\077\001\002" +
    "\000\004\072\100\001\002\000\026\006\025\007\030\010" +
    "\032\013\036\014\013\033\027\034\031\035\026\036\033" +
    "\041\034\001\002\000\016\006\025\007\030\010\032\013" +
    "\036\014\013\044\102\001\002\000\004\066\103\001\002" +
    "\000\006\042\071\062\uffd7\001\002\000\004\062\uffd5\001" +
    "\002\000\026\006\025\007\030\010\032\013\036\014\013" +
    "\033\027\034\031\035\026\036\033\041\034\001\002\000" +
    "\016\006\025\007\030\010\032\013\036\014\013\044\107" +
    "\001\002\000\004\066\110\001\002\000\006\042\071\062" +
    "\uffd8\001\002\000\004\062\uffd6\001\002\000\004\005\113" +
    "\001\002\000\004\071\114\001\002\000\006\005\uffce\071" +
    "\114\001\002\000\004\005\116\001\002\000\006\053\121" +
    "\066\120\001\002\000\004\066\130\001\002\000\020\006" +
    "\uffc4\007\uffc4\010\uffc4\013\uffc4\014\uffc4\044\uffc4\062\uffc4" +
    "\001\002\000\006\005\122\071\123\001\002\000\004\071" +
    "\114\001\002\000\006\053\121\066\uffc8\001\002\000\004" +
    "\066\uffc6\001\002\000\004\005\126\001\002\000\006\053" +
    "\121\066\uffc7\001\002\000\004\066\uffc5\001\002\000\020" +
    "\006\uffc3\007\uffc3\010\uffc3\013\uffc3\014\uffc3\044\uffc3\062" +
    "\uffc3\001\002\000\004\005\uffcd\001\002\000\006\056\042" +
    "\071\043\001\002\000\004\060\134\001\002\000\004\061" +
    "\135\001\002\000\026\006\025\007\030\010\032\013\036" +
    "\014\013\033\027\034\031\035\026\036\033\041\034\001" +
    "\002\000\016\006\025\007\030\010\032\013\036\014\013" +
    "\062\137\001\002\000\022\006\uffe4\007\uffe4\010\uffe4\011" +
    "\140\013\uffe4\014\uffe4\044\uffe4\062\uffe4\001\002\000\004" +
    "\061\141\001\002\000\026\006\025\007\030\010\032\013" +
    "\036\014\013\033\027\034\031\035\026\036\033\041\034" +
    "\001\002\000\016\006\025\007\030\010\032\013\036\014" +
    "\013\062\143\001\002\000\020\006\uffdd\007\uffdd\010\uffdd" +
    "\013\uffdd\014\uffdd\044\uffdd\062\uffdd\001\002\000\004\005" +
    "\145\001\002\000\004\071\114\001\002\000\004\005\147" +
    "\001\002\000\004\070\150\001\002\000\004\071\152\001" +
    "\002\000\004\060\155\001\002\000\006\060\uffd0\070\153" +
    "\001\002\000\004\071\152\001\002\000\004\060\uffcf\001" +
    "\002\000\004\066\156\001\002\000\020\006\uffca\007\uffca" +
    "\010\uffca\013\uffca\014\uffca\044\uffca\062\uffca\001\002\000" +
    "\006\045\161\054\160\001\002\000\004\005\170\001\002" +
    "\000\004\005\162\001\002\000\006\005\163\071\164\001" +
    "\002\000\004\066\167\001\002\000\004\005\165\001\002" +
    "\000\004\066\166\001\002\000\020\006\uffe5\007\uffe5\010" +
    "\uffe5\013\uffe5\014\uffe5\044\uffe5\062\uffe5\001\002\000\020" +
    "\006\uffe7\007\uffe7\010\uffe7\013\uffe7\014\uffe7\044\uffe7\062" +
    "\uffe7\001\002\000\006\005\171\071\172\001\002\000\004" +
    "\066\175\001\002\000\004\005\173\001\002\000\004\066" +
    "\174\001\002\000\020\006\uffe6\007\uffe6\010\uffe6\013\uffe6" +
    "\014\uffe6\044\uffe6\062\uffe6\001\002\000\020\006\uffe8\007" +
    "\uffe8\010\uffe8\013\uffe8\014\uffe8\044\uffe8\062\uffe8\001\002" +
    "\000\004\005\177\001\002\000\004\071\114\001\002\000" +
    "\004\005\201\001\002\000\006\060\202\070\203\001\002" +
    "\000\004\066\207\001\002\000\004\071\152\001\002\000" +
    "\004\060\205\001\002\000\004\066\206\001\002\000\020" +
    "\006\uffcb\007\uffcb\010\uffcb\013\uffcb\014\uffcb\044\uffcb\062" +
    "\uffcb\001\002\000\020\006\uffcc\007\uffcc\010\uffcc\013\uffcc" +
    "\014\uffcc\044\uffcc\062\uffcc\001\002\000\004\071\211\001" +
    "\002\000\004\066\212\001\002\000\020\006\uffc9\007\uffc9" +
    "\010\uffc9\013\uffc9\014\uffc9\044\uffc9\062\uffc9\001\002\000" +
    "\012\045\222\054\217\055\221\066\220\001\002\000\004" +
    "\071\215\001\002\000\004\066\216\001\002\000\020\006" +
    "\uffe9\007\uffe9\010\uffe9\013\uffe9\014\uffe9\044\uffe9\062\uffe9" +
    "\001\002\000\004\073\231\001\002\000\020\006\uffef\007" +
    "\uffef\010\uffef\013\uffef\014\uffef\044\uffef\062\uffef\001\002" +
    "\000\004\066\230\001\002\000\004\073\223\001\002\000" +
    "\006\066\224\067\225\001\002\000\020\006\uffec\007\uffec" +
    "\010\uffec\013\uffec\014\uffec\044\uffec\062\uffec\001\002\000" +
    "\004\073\226\001\002\000\004\066\227\001\002\000\020" +
    "\006\uffeb\007\uffeb\010\uffeb\013\uffeb\014\uffeb\044\uffeb\062" +
    "\uffeb\001\002\000\020\006\uffea\007\uffea\010\uffea\013\uffea" +
    "\014\uffea\044\uffea\062\uffea\001\002\000\006\066\232\067" +
    "\233\001\002\000\020\006\uffee\007\uffee\010\uffee\013\uffee" +
    "\014\uffee\044\uffee\062\uffee\001\002\000\004\073\234\001" +
    "\002\000\004\066\235\001\002\000\020\006\uffed\007\uffed" +
    "\010\uffed\013\uffed\014\uffed\044\uffed\062\uffed\001\002\000" +
    "\004\002\000\001\002\000\006\006\241\071\242\001\002" +
    "\000\004\060\266\001\002\000\004\071\257\001\002\000" +
    "\004\045\243\001\002\000\004\073\244\001\002\000\004" +
    "\066\245\001\002\000\006\056\042\071\043\001\002\000" +
    "\004\066\247\001\002\000\006\055\251\071\252\001\002" +
    "\000\004\060\uffd9\001\002\000\004\071\256\001\002\000" +
    "\006\054\253\055\254\001\002\000\004\073\255\001\002" +
    "\000\004\060\uffd2\001\002\000\004\060\uffd3\001\002\000" +
    "\004\060\uffd1\001\002\000\004\045\260\001\002\000\004" +
    "\073\261\001\002\000\004\066\262\001\002\000\006\056" +
    "\042\071\043\001\002\000\004\066\264\001\002\000\006" +
    "\055\251\071\252\001\002\000\004\060\uffda\001\002\000" +
    "\004\061\267\001\002\000\026\006\025\007\030\010\032" +
    "\013\036\014\013\033\027\034\031\035\026\036\033\041" +
    "\034\001\002\000\016\006\025\007\030\010\032\013\036" +
    "\014\013\062\271\001\002\000\020\006\uffdb\007\uffdb\010" +
    "\uffdb\013\uffdb\014\uffdb\044\uffdb\062\uffdb\001\002\000\004" +
    "\002\001\001\002\000\004\060\274\001\002\000\004\061" +
    "\275\001\002\000\026\006\025\007\030\010\032\013\036" +
    "\014\013\033\027\034\031\035\026\036\033\041\034\001" +
    "\002\000\016\006\025\007\030\010\032\013\036\014\013" +
    "\062\277\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\017\004\015\006" +
    "\021\007\023\010\013\011\036\016\022\017\014\021\016" +
    "\022\034\023\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\060\006\062\007\061\010\056\011\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\055\004\015\006\021\007\023\010\013\011\036\016" +
    "\022\017\014\021\016\022\034\023\020\001\001\000\014" +
    "\004\060\006\062\007\061\010\056\011\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\100\004\015\006\021\007" +
    "\023\010\013\011\036\016\022\017\014\021\016\022\034" +
    "\023\020\001\001\000\014\004\060\006\062\007\061\010" +
    "\056\011\057\001\001\000\002\001\001\000\004\024\103" +
    "\001\001\000\002\001\001\000\030\003\105\004\015\006" +
    "\021\007\023\010\013\011\036\016\022\017\014\021\016" +
    "\022\034\023\020\001\001\000\014\004\060\006\062\007" +
    "\061\010\056\011\057\001\001\000\002\001\001\000\004" +
    "\024\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\114\001\001\000\004\015\130\001\001\000\002" +
    "\001\001\000\004\020\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\124\001\001" +
    "\000\004\020\123\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\132\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\135\004\015" +
    "\006\021\007\023\010\013\011\036\016\022\017\014\021" +
    "\016\022\034\023\020\001\001\000\014\004\060\006\062" +
    "\007\061\010\056\011\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\141\004\015\006\021\007\023" +
    "\010\013\011\036\016\022\017\014\021\016\022\034\023" +
    "\020\001\001\000\014\004\060\006\062\007\061\010\056" +
    "\011\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\245\001\001" +
    "\000\002\001\001\000\004\005\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\262\001\001\000\002\001\001\000\004\005\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\267" +
    "\004\015\006\021\007\023\010\013\011\036\016\022\017" +
    "\014\021\016\022\034\023\020\001\001\000\014\004\060" +
    "\006\062\007\061\010\056\011\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\275\004\015\006\021\007\023\010\013\011" +
    "\036\016\022\017\014\021\016\022\034\023\020\001\001" +
    "\000\014\004\060\006\062\007\061\010\056\011\057\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COUT ::= Cout Op_relacional Comillas CADENA Comillas SENTENCIACOUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COUT ::= Cout Op_relacional Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIACOUT ::= Op_relacional Comillas CADENA Comillas SENTENCIACOUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIACOUT ::= Op_relacional Identificador SENTENCIACOUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIACOUT ::= Op_relacional Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIACOUT ::= Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CIN ::= Cin Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SCANF ::= ScanF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCANF",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRINTF ::= PrintF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PRINTF ::= PrintF Parent_a Comillas CADENA Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CADENA ::= Identificador CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CADENA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACIONV ::= Identificador Coma DECLARACIONV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACIONV ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_CASE ::= Case Comillas Identificador Comillas Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_CASE ::= Case Comillas Identificador Comillas Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= T_dato Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

