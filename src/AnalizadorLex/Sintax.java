
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 17 19:02:53 COT 2021
//----------------------------------------------------

package AnalizadorLex;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 17 19:02:53 COT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\004\005\000\002\004\007\000\002" +
    "\004\007\000\002\004\010\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\010\000\002\004\010" +
    "\000\002\004\007\000\002\004\007\000\002\004\005\000" +
    "\002\004\005\000\002\004\006\000\002\004\010\000\002" +
    "\004\010\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\011\000\002\004\011\000\002\004\010" +
    "\000\002\004\010\000\002\004\005\000\002\004\011\000" +
    "\002\004\011\000\002\004\006\000\002\004\012\000\002" +
    "\004\012\000\002\004\012\000\002\004\005\000\002\004" +
    "\011\000\002\004\012\000\002\004\005\000\002\004\011" +
    "\000\002\004\011\000\002\004\012\000\002\004\010\000" +
    "\002\004\010\000\002\004\011\000\002\004\011\000\002" +
    "\004\012\000\002\004\003\000\002\006\011\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\006\000\002\012\007\000\002\007\015\000" +
    "\002\010\011\000\002\011\011\000\002\013\012\000\002" +
    "\013\011\000\002\024\010\000\002\024\012\000\002\024" +
    "\011\000\002\024\013\000\002\023\011\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\014\003\000" +
    "\002\014\005\000\002\015\003\000\002\015\004\000\002" +
    "\016\011\000\002\016\013\000\002\017\013\000\002\021" +
    "\006\000\002\020\004\000\002\020\006\000\002\020\005" +
    "\000\002\020\007\000\002\022\010\000\002\022\011\000" +
    "\002\025\003\000\002\025\004\000\002\026\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\006\015\006\065\004\001\002\000\004\057" +
    "\u0145\001\002\000\004\002\u0144\001\002\000\004\065\007" +
    "\001\002\000\004\057\010\001\002\000\004\060\011\001" +
    "\002\000\004\061\012\001\002\000\044\007\037\010\041" +
    "\013\045\014\013\015\026\016\032\017\014\020\020\021" +
    "\031\022\047\024\036\025\033\033\035\034\040\035\034" +
    "\036\042\041\043\001\002\000\004\057\u0129\001\002\000" +
    "\004\071\u0122\001\002\000\050\007\uffc0\010\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\024\uffc0\025\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\041\uffc0\044\uffc0\062\uffc0\001\002\000\050\007\ufff7\010" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\024\ufff7\025\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\041\ufff7\044\ufff7\062\ufff7\001\002\000\050" +
    "\007\ufff2\010\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\024\ufff2\025\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\041\ufff2\044\ufff2\062\ufff2\001" +
    "\002\000\004\071\u0116\001\002\000\050\007\ufff0\010\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\022\ufff0\024\ufff0\025\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\041\ufff0\044\ufff0\062\ufff0\001\002\000\050\007" +
    "\ufffd\010\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\024\ufffd\025\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\036\ufffd\041\ufffd\044\ufffd\062\ufffd\001\002" +
    "\000\046\007\037\010\041\013\045\014\013\015\026\016" +
    "\032\017\014\020\020\021\031\022\047\024\036\025\033" +
    "\033\035\034\040\035\034\036\042\041\043\062\u0115\001" +
    "\002\000\050\007\uffec\010\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\024\uffec\025" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\041\uffec\044\uffec" +
    "\062\uffec\001\002\000\050\007\ufffb\010\ufffb\013\ufffb\014" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\024\ufffb\025\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\041" +
    "\ufffb\044\ufffb\062\ufffb\001\002\000\006\055\u0108\071\u0109" +
    "\001\002\000\050\007\ufff4\010\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\024\ufff4" +
    "\025\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\041\ufff4\044" +
    "\ufff4\062\ufff4\001\002\000\050\007\ufff9\010\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\024\ufff9\025\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9" +
    "\041\ufff9\044\ufff9\062\ufff9\001\002\000\014\007\353\015" +
    "\352\016\350\017\347\020\351\001\002\000\004\071\333" +
    "\001\002\000\006\015\314\071\313\001\002\000\004\053" +
    "\310\001\002\000\004\057\276\001\002\000\004\071\267" +
    "\001\002\000\004\071\250\001\002\000\004\057\235\001" +
    "\002\000\004\057\223\001\002\000\004\053\203\001\002" +
    "\000\004\057\156\001\002\000\050\007\uffee\010\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\024\uffee\025\uffee\033\uffee\034\uffee\035\uffee\036" +
    "\uffee\041\uffee\044\uffee\062\uffee\001\002\000\004\057\124" +
    "\001\002\000\050\007\ufff5\010\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\024\ufff5" +
    "\025\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\041\ufff5\044" +
    "\ufff5\062\ufff5\001\002\000\012\015\053\016\050\022\051" +
    "\071\052\001\002\000\004\071\110\001\002\000\004\015" +
    "\072\001\002\000\004\066\071\001\002\000\006\055\055" +
    "\071\054\001\002\000\012\045\063\054\060\055\062\066" +
    "\061\001\002\000\004\071\056\001\002\000\004\066\057" +
    "\001\002\000\050\007\uffd9\010\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\041\uffd9\044" +
    "\uffd9\062\uffd9\001\002\000\004\073\067\001\002\000\050" +
    "\007\uffdd\010\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\033\uffdd" +
    "\034\uffdd\035\uffdd\036\uffdd\041\uffdd\044\uffdd\062\uffdd\001" +
    "\002\000\004\066\066\001\002\000\004\073\064\001\002" +
    "\000\004\066\065\001\002\000\050\007\uffdb\010\uffdb\013" +
    "\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb" +
    "\022\uffdb\024\uffdb\025\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\041\uffdb\044\uffdb\062\uffdb\001\002\000\050\007\uffda" +
    "\010\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\024\uffda\025\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\041\uffda\044\uffda\062\uffda\001\002\000" +
    "\004\066\070\001\002\000\050\007\uffdc\010\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\024\uffdc\025\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc" +
    "\041\uffdc\044\uffdc\062\uffdc\001\002\000\050\007\uffde\010" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\022\uffde\024\uffde\025\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\041\uffde\044\uffde\062\uffde\001\002\000\006" +
    "\055\073\071\074\001\002\000\004\071\106\001\002\000" +
    "\012\045\100\054\075\055\077\066\076\001\002\000\004" +
    "\073\104\001\002\000\050\007\uffd8\010\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\024\uffd8\025\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\041" +
    "\uffd8\044\uffd8\062\uffd8\001\002\000\004\066\103\001\002" +
    "\000\004\073\101\001\002\000\004\066\102\001\002\000" +
    "\050\007\uffd6\010\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\024\uffd6\025\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\041\uffd6\044\uffd6\062\uffd6" +
    "\001\002\000\050\007\uffd5\010\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\024\uffd5" +
    "\025\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\041\uffd5\044" +
    "\uffd5\062\uffd5\001\002\000\004\066\105\001\002\000\050" +
    "\007\uffd7\010\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\036\uffd7\041\uffd7\044\uffd7\062\uffd7\001" +
    "\002\000\004\066\107\001\002\000\050\007\uffd4\010\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\024\uffd4\025\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\041\uffd4\044\uffd4\062\uffd4\001\002\000\010\045" +
    "\113\054\111\066\112\001\002\000\004\073\120\001\002" +
    "\000\050\007\uffd0\010\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\041\uffd0\044\uffd0\062" +
    "\uffd0\001\002\000\004\073\114\001\002\000\004\067\115" +
    "\001\002\000\004\073\116\001\002\000\004\066\117\001" +
    "\002\000\050\007\uffce\010\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\024\uffce\025" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\041\uffce\044\uffce" +
    "\062\uffce\001\002\000\004\067\121\001\002\000\004\073" +
    "\122\001\002\000\004\066\123\001\002\000\050\007\uffcf" +
    "\010\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\041\uffcf\044\uffcf\062\uffcf\001\002\000" +
    "\006\056\126\071\127\001\002\000\004\060\140\001\002" +
    "\000\006\060\uffbe\066\uffbe\001\002\000\004\053\130\001" +
    "\002\000\012\005\132\056\133\071\134\073\131\001\002" +
    "\000\006\060\uffbc\066\uffbc\001\002\000\006\005\135\071" +
    "\136\001\002\000\006\060\uffbd\066\uffbd\001\002\000\006" +
    "\060\uffbb\066\uffbb\001\002\000\006\060\uffba\066\uffba\001" +
    "\002\000\004\005\137\001\002\000\006\060\uffb9\066\uffb9" +
    "\001\002\000\004\061\141\001\002\000\044\007\037\010" +
    "\041\013\045\014\013\015\026\016\032\017\014\020\020" +
    "\021\031\022\047\024\036\025\033\033\035\034\040\035" +
    "\034\036\042\041\043\001\002\000\046\007\037\010\041" +
    "\013\045\014\013\015\026\016\032\017\014\020\020\021" +
    "\031\022\047\024\036\025\033\033\035\034\040\035\034" +
    "\036\042\041\043\062\151\001\002\000\050\007\ufff8\010" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\024\ufff8\025\ufff8\033\ufff8\034\ufff8\035" +
    "\ufff8\036\ufff8\041\ufff8\044\ufff8\062\ufff8\001\002\000\050" +
    "\007\ufff1\010\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017" +
    "\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\041\ufff1\044\ufff1\062\ufff1\001" +
    "\002\000\050\007\uffef\010\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\024\uffef\025" +
    "\uffef\033\uffef\034\uffef\035\uffef\036\uffef\041\uffef\044\uffef" +
    "\062\uffef\001\002\000\050\007\ufffe\010\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\024\ufffe\025\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\041" +
    "\ufffe\044\ufffe\062\ufffe\001\002\000\050\007\uffeb\010\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\024\uffeb\025\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\041\uffeb\044\uffeb\062\uffeb\001\002\000\050\007" +
    "\ufffc\010\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\017\ufffc" +
    "\020\ufffc\021\ufffc\022\ufffc\024\ufffc\025\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\041\ufffc\044\ufffc\062\ufffc\001\002" +
    "\000\050\007\uffb7\010\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\024\uffb7\025\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\036\uffb7\041\uffb7\044\uffb7\062" +
    "\uffb7\001\002\000\050\007\ufff3\010\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\024" +
    "\ufff3\025\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\041\ufff3" +
    "\044\ufff3\062\ufff3\001\002\000\050\007\ufffa\010\ufffa\013" +
    "\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa" +
    "\022\ufffa\024\ufffa\025\ufffa\033\ufffa\034\ufffa\035\ufffa\036" +
    "\ufffa\041\ufffa\044\ufffa\062\ufffa\001\002\000\050\007\uffed" +
    "\010\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\024\uffed\025\uffed\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\041\uffed\044\uffed\062\uffed\001\002\000" +
    "\050\007\ufff6\010\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024\ufff6\025\ufff6\033" +
    "\ufff6\034\ufff6\035\ufff6\036\ufff6\041\ufff6\044\ufff6\062\ufff6" +
    "\001\002\000\004\071\157\001\002\000\004\060\160\001" +
    "\002\000\004\061\161\001\002\000\004\042\162\001\002" +
    "\000\006\005\166\073\165\001\002\000\004\062\164\001" +
    "\002\000\050\007\uffaf\010\uffaf\013\uffaf\014\uffaf\015\uffaf" +
    "\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\024\uffaf\025" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\041\uffaf\044\uffaf" +
    "\062\uffaf\001\002\000\004\072\176\001\002\000\004\071" +
    "\167\001\002\000\004\005\170\001\002\000\004\072\171" +
    "\001\002\000\044\007\037\010\041\013\045\014\013\015" +
    "\026\016\032\017\014\020\020\021\031\022\047\024\036" +
    "\025\033\033\035\034\040\035\034\036\042\041\043\001" +
    "\002\000\046\007\037\010\041\013\045\014\013\015\026" +
    "\016\032\017\014\020\020\021\031\022\047\024\036\025" +
    "\033\033\035\034\040\035\034\036\042\041\043\044\173" +
    "\001\002\000\004\066\174\001\002\000\006\042\162\062" +
    "\uffb2\001\002\000\004\062\uffb0\001\002\000\044\007\037" +
    "\010\041\013\045\014\013\015\026\016\032\017\014\020" +
    "\020\021\031\022\047\024\036\025\033\033\035\034\040" +
    "\035\034\036\042\041\043\001\002\000\046\007\037\010" +
    "\041\013\045\014\013\015\026\016\032\017\014\020\020" +
    "\021\031\022\047\024\036\025\033\033\035\034\040\035" +
    "\034\036\042\041\043\044\200\001\002\000\004\066\201" +
    "\001\002\000\006\042\162\062\uffb3\001\002\000\004\062" +
    "\uffb1\001\002\000\004\005\204\001\002\000\004\071\205" +
    "\001\002\000\006\005\uffa9\071\205\001\002\000\004\005" +
    "\207\001\002\000\006\053\212\066\210\001\002\000\050" +
    "\007\uff9f\010\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\021\uff9f\022\uff9f\024\uff9f\025\uff9f\033\uff9f" +
    "\034\uff9f\035\uff9f\036\uff9f\041\uff9f\044\uff9f\062\uff9f\001" +
    "\002\000\004\066\221\001\002\000\006\005\213\071\214" +
    "\001\002\000\004\071\205\001\002\000\006\053\212\066" +
    "\uffa3\001\002\000\004\066\uffa1\001\002\000\004\005\217" +
    "\001\002\000\006\053\212\066\uffa2\001\002\000\004\066" +
    "\uffa0\001\002\000\050\007\uff9e\010\uff9e\013\uff9e\014\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\024" +
    "\uff9e\025\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\041\uff9e" +
    "\044\uff9e\062\uff9e\001\002\000\004\005\uffa8\001\002\000" +
    "\006\056\126\071\127\001\002\000\004\060\225\001\002" +
    "\000\004\061\226\001\002\000\044\007\037\010\041\013" +
    "\045\014\013\015\026\016\032\017\014\020\020\021\031" +
    "\022\047\024\036\025\033\033\035\034\040\035\034\036" +
    "\042\041\043\001\002\000\046\007\037\010\041\013\045" +
    "\014\013\015\026\016\032\017\014\020\020\021\031\022" +
    "\047\024\036\025\033\033\035\034\040\035\034\036\042" +
    "\041\043\062\230\001\002\000\052\007\uffbf\010\uffbf\011" +
    "\231\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\024\uffbf\025\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\041\uffbf\044\uffbf\062\uffbf\001\002\000\004" +
    "\061\232\001\002\000\044\007\037\010\041\013\045\014" +
    "\013\015\026\016\032\017\014\020\020\021\031\022\047" +
    "\024\036\025\033\033\035\034\040\035\034\036\042\041" +
    "\043\001\002\000\046\007\037\010\041\013\045\014\013" +
    "\015\026\016\032\017\014\020\020\021\031\022\047\024" +
    "\036\025\033\033\035\034\040\035\034\036\042\041\043" +
    "\062\234\001\002\000\050\007\uffb8\010\uffb8\013\uffb8\014" +
    "\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\024\uffb8\025\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\041" +
    "\uffb8\044\uffb8\062\uffb8\001\002\000\004\005\236\001\002" +
    "\000\004\071\205\001\002\000\004\005\240\001\002\000" +
    "\004\070\241\001\002\000\004\071\243\001\002\000\004" +
    "\060\246\001\002\000\006\060\uffab\070\244\001\002\000" +
    "\004\071\243\001\002\000\004\060\uffaa\001\002\000\004" +
    "\066\247\001\002\000\050\007\uffa5\010\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\024\uffa5\025\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\041" +
    "\uffa5\044\uffa5\062\uffa5\001\002\000\006\045\252\054\251" +
    "\001\002\000\004\005\261\001\002\000\004\005\253\001" +
    "\002\000\006\005\254\071\255\001\002\000\004\066\260" +
    "\001\002\000\004\005\256\001\002\000\004\066\257\001" +
    "\002\000\050\007\uffc2\010\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\024\uffc2\025" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\041\uffc2\044\uffc2" +
    "\062\uffc2\001\002\000\050\007\uffc4\010\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\024\uffc4\025\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\041" +
    "\uffc4\044\uffc4\062\uffc4\001\002\000\006\005\262\071\263" +
    "\001\002\000\004\066\266\001\002\000\004\005\264\001" +
    "\002\000\004\066\265\001\002\000\050\007\uffc3\010\uffc3" +
    "\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\021" +
    "\uffc3\022\uffc3\024\uffc3\025\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\041\uffc3\044\uffc3\062\uffc3\001\002\000\050\007" +
    "\uffc5\010\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\041\uffc5\044\uffc5\062\uffc5\001\002" +
    "\000\004\061\270\001\002\000\024\007\037\015\026\016" +
    "\032\017\014\020\020\021\031\022\047\024\036\025\033" +
    "\001\002\000\004\062\274\001\002\000\026\007\037\015" +
    "\026\016\032\017\014\020\020\021\031\022\047\024\036" +
    "\025\033\062\uff9d\001\002\000\004\062\uff9c\001\002\000" +
    "\004\066\275\001\002\000\050\007\uff9b\010\uff9b\013\uff9b" +
    "\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\024\uff9b\025\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b" +
    "\041\uff9b\044\uff9b\062\uff9b\001\002\000\004\005\277\001" +
    "\002\000\004\071\205\001\002\000\004\005\301\001\002" +
    "\000\006\060\302\070\303\001\002\000\004\066\307\001" +
    "\002\000\004\071\243\001\002\000\004\060\305\001\002" +
    "\000\004\066\306\001\002\000\050\007\uffa6\010\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\024\uffa6\025\uffa6\033\uffa6\034\uffa6\035\uffa6\036" +
    "\uffa6\041\uffa6\044\uffa6\062\uffa6\001\002\000\050\007\uffa7" +
    "\010\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\036\uffa7\041\uffa7\044\uffa7\062\uffa7\001\002\000" +
    "\004\071\311\001\002\000\004\066\312\001\002\000\050" +
    "\007\uffa4\010\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\020\uffa4\021\uffa4\022\uffa4\024\uffa4\025\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\041\uffa4\044\uffa4\062\uffa4\001" +
    "\002\000\004\066\332\001\002\000\006\055\315\071\316" +
    "\001\002\000\004\071\330\001\002\000\012\045\322\054" +
    "\317\055\321\066\320\001\002\000\004\073\326\001\002" +
    "\000\050\007\uffe4\010\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\041\uffe4\044\uffe4\062" +
    "\uffe4\001\002\000\004\066\325\001\002\000\004\073\323" +
    "\001\002\000\004\066\324\001\002\000\050\007\uffe2\010" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\024\uffe2\025\uffe2\033\uffe2\034\uffe2\035" +
    "\uffe2\036\uffe2\041\uffe2\044\uffe2\062\uffe2\001\002\000\050" +
    "\007\uffe1\010\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\041\uffe1\044\uffe1\062\uffe1\001" +
    "\002\000\004\066\327\001\002\000\050\007\uffe3\010\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\024\uffe3\025\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\041\uffe3\044\uffe3\062\uffe3\001\002\000\004\066" +
    "\331\001\002\000\050\007\uffe0\010\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024" +
    "\uffe0\025\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\041\uffe0" +
    "\044\uffe0\062\uffe0\001\002\000\050\007\uffdf\010\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\024\uffdf\025\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\041\uffdf\044\uffdf\062\uffdf\001\002\000\010\045\336" +
    "\054\334\066\335\001\002\000\004\073\343\001\002\000" +
    "\050\007\uffd3\010\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\022\uffd3\024\uffd3\025\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\041\uffd3\044\uffd3\062\uffd3" +
    "\001\002\000\004\073\337\001\002\000\004\067\340\001" +
    "\002\000\004\073\341\001\002\000\004\066\342\001\002" +
    "\000\050\007\uffd1\010\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\024\uffd1\025\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1\044\uffd1\062" +
    "\uffd1\001\002\000\004\067\344\001\002\000\004\073\345" +
    "\001\002\000\004\066\346\001\002\000\050\007\uffd2\010" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\021\uffd2\022\uffd2\024\uffd2\025\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\041\uffd2\044\uffd2\062\uffd2\001\002\000\004" +
    "\071\u0102\001\002\000\004\071\374\001\002\000\004\071" +
    "\366\001\002\000\004\071\362\001\002\000\004\071\354" +
    "\001\002\000\004\045\355\001\002\000\004\005\356\001" +
    "\002\000\004\071\357\001\002\000\004\005\360\001\002" +
    "\000\004\066\361\001\002\000\050\007\uffc1\010\uffc1\013" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\024\uffc1\025\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\041\uffc1\044\uffc1\062\uffc1\001\002\000\004\045\363" +
    "\001\002\000\004\073\364\001\002\000\004\066\365\001" +
    "\002\000\050\007\uffe7\010\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\025" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\041\uffe7\044\uffe7" +
    "\062\uffe7\001\002\000\004\045\367\001\002\000\004\073" +
    "\370\001\002\000\004\067\371\001\002\000\004\073\372" +
    "\001\002\000\004\066\373\001\002\000\050\007\uffc6\010" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\024\uffc6\025\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\041\uffc6\044\uffc6\062\uffc6\001\002\000\004" +
    "\045\375\001\002\000\004\073\376\001\002\000\004\067" +
    "\377\001\002\000\004\073\u0100\001\002\000\004\066\u0101" +
    "\001\002\000\050\007\uffcd\010\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\024\uffcd" +
    "\025\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\041\uffcd\044" +
    "\uffcd\062\uffcd\001\002\000\004\045\u0103\001\002\000\004" +
    "\005\u0104\001\002\000\004\071\u0105\001\002\000\004\005" +
    "\u0106\001\002\000\004\066\u0107\001\002\000\050\007\uffca" +
    "\010\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\024\uffca\025\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\041\uffca\044\uffca\062\uffca\001\002\000" +
    "\004\071\u0113\001\002\000\012\045\u010d\054\u010a\055\u010c" +
    "\066\u010b\001\002\000\004\073\u0111\001\002\000\050\007" +
    "\uffea\010\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\024\uffea\025\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\041\uffea\044\uffea\062\uffea\001\002" +
    "\000\004\066\u0110\001\002\000\004\073\u010e\001\002\000" +
    "\004\066\u010f\001\002\000\050\007\uffe8\010\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\024\uffe8\025\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8" +
    "\041\uffe8\044\uffe8\062\uffe8\001\002\000\050\007\uffe6\010" +
    "\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\024\uffe6\025\uffe6\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\041\uffe6\044\uffe6\062\uffe6\001\002\000\004" +
    "\066\u0112\001\002\000\050\007\uffe9\010\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\024\uffe9\025\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\041" +
    "\uffe9\044\uffe9\062\uffe9\001\002\000\004\066\u0114\001\002" +
    "\000\050\007\uffe5\010\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\041\uffe5\044\uffe5\062" +
    "\uffe5\001\002\000\004\002\000\001\002\000\010\045\u0119" +
    "\054\u0117\066\u0118\001\002\000\004\073\u011e\001\002\000" +
    "\050\007\uffc9\010\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9\033" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\041\uffc9\044\uffc9\062\uffc9" +
    "\001\002\000\004\073\u011a\001\002\000\004\067\u011b\001" +
    "\002\000\004\073\u011c\001\002\000\004\066\u011d\001\002" +
    "\000\050\007\uffc7\010\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\024\uffc7\025\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\041\uffc7\044\uffc7\062" +
    "\uffc7\001\002\000\004\067\u011f\001\002\000\004\073\u0120" +
    "\001\002\000\004\066\u0121\001\002\000\050\007\uffc8\010" +
    "\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\024\uffc8\025\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\041\uffc8\044\uffc8\062\uffc8\001\002\000\006" +
    "\045\u0124\066\u0123\001\002\000\050\007\uffcc\010\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\024\uffcc\025\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\041\uffcc\044\uffcc\062\uffcc\001\002\000\004\005\u0125" +
    "\001\002\000\004\071\u0126\001\002\000\004\005\u0127\001" +
    "\002\000\004\066\u0128\001\002\000\050\007\uffcb\010\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\024\uffcb\025\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\041\uffcb\044\uffcb\062\uffcb\001\002\000\006\006" +
    "\u012c\071\u012b\001\002\000\004\060\u0140\001\002\000\004" +
    "\045\u013a\001\002\000\004\071\u012d\001\002\000\004\045" +
    "\u012e\001\002\000\004\073\u012f\001\002\000\004\066\u0130" +
    "\001\002\000\006\056\126\071\127\001\002\000\004\066" +
    "\u0132\001\002\000\006\055\u0135\071\u0134\001\002\000\004" +
    "\060\uffb5\001\002\000\006\054\u0137\055\u0138\001\002\000" +
    "\004\071\u0136\001\002\000\004\060\uffac\001\002\000\004" +
    "\073\u0139\001\002\000\004\060\uffad\001\002\000\004\060" +
    "\uffae\001\002\000\004\073\u013b\001\002\000\004\066\u013c" +
    "\001\002\000\006\056\126\071\127\001\002\000\004\066" +
    "\u013e\001\002\000\006\055\u0135\071\u0134\001\002\000\004" +
    "\060\uffb4\001\002\000\004\061\u0141\001\002\000\044\007" +
    "\037\010\041\013\045\014\013\015\026\016\032\017\014" +
    "\020\020\021\031\022\047\024\036\025\033\033\035\034" +
    "\040\035\034\036\042\041\043\001\002\000\046\007\037" +
    "\010\041\013\045\014\013\015\026\016\032\017\014\020" +
    "\020\021\031\022\047\024\036\025\033\033\035\034\040" +
    "\035\034\036\042\041\043\062\u0143\001\002\000\050\007" +
    "\uffb6\010\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\041\uffb6\044\uffb6\062\uffb6\001\002" +
    "\000\004\002\001\001\002\000\004\060\u0146\001\002\000" +
    "\004\061\u0147\001\002\000\044\007\037\010\041\013\045" +
    "\014\013\015\026\016\032\017\014\020\020\021\031\022" +
    "\047\024\036\025\033\033\035\034\040\035\034\036\042" +
    "\041\043\001\002\000\046\007\037\010\041\013\045\014" +
    "\013\015\026\016\032\017\014\020\020\021\031\022\047" +
    "\024\036\025\033\033\035\034\040\035\034\036\042\041" +
    "\043\062\u0149\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0147\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\022\004\021\006" +
    "\024\007\027\010\015\011\045\016\026\017\016\021\020" +
    "\022\043\023\023\026\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\145\006\147\007\152\010\142\011\154" +
    "\016\151\017\143\021\144\022\153\023\146\026\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\141\004\021\006\024\007\027\010\015\011\045" +
    "\016\026\017\016\021\020\022\043\023\023\026\014\001" +
    "\001\000\030\004\145\006\147\007\152\010\142\011\154" +
    "\016\151\017\143\021\144\022\153\023\146\026\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\171\004\021\006\024\007\027\010\015\011" +
    "\045\016\026\017\016\021\020\022\043\023\023\026\014" +
    "\001\001\000\030\004\145\006\147\007\152\010\142\011" +
    "\154\016\151\017\143\021\144\022\153\023\146\026\014" +
    "\001\001\000\002\001\001\000\004\024\174\001\001\000" +
    "\002\001\001\000\032\003\176\004\021\006\024\007\027" +
    "\010\015\011\045\016\026\017\016\021\020\022\043\023" +
    "\023\026\014\001\001\000\030\004\145\006\147\007\152" +
    "\010\142\011\154\016\151\017\143\021\144\022\153\023" +
    "\146\026\014\001\001\000\002\001\001\000\004\024\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\205\001\001\000\004\015\221\001\001\000\002\001\001" +
    "\000\004\020\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\215\001\001\000\004" +
    "\020\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\003\226\004\021\006\024" +
    "\007\027\010\015\011\045\016\026\017\016\021\020\022" +
    "\043\023\023\026\014\001\001\000\030\004\145\006\147" +
    "\007\152\010\142\011\154\016\151\017\143\021\144\022" +
    "\153\023\146\026\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\232\004\021\006\024\007\027\010" +
    "\015\011\045\016\026\017\016\021\020\022\043\023\023" +
    "\026\014\001\001\000\030\004\145\006\147\007\152\010" +
    "\142\011\154\016\151\017\143\021\144\022\153\023\146" +
    "\026\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\271\025\270\026\014" +
    "\001\001\000\002\001\001\000\010\004\271\025\272\026" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u0129\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0130" +
    "\001\001\000\002\001\001\000\004\005\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u013c" +
    "\001\001\000\002\001\001\000\004\005\u013e\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\u0141\004\021" +
    "\006\024\007\027\010\015\011\045\016\026\017\016\021" +
    "\020\022\043\023\023\026\014\001\001\000\030\004\145" +
    "\006\147\007\152\010\142\011\154\016\151\017\143\021" +
    "\144\022\153\023\146\026\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\u0147\004\021\006\024\007\027\010\015\011\045" +
    "\016\026\017\016\021\020\022\043\023\023\026\014\001" +
    "\001\000\030\004\145\006\147\007\152\010\142\011\154" +
    "\016\151\017\143\021\144\022\153\023\146\026\014\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // STRUCT ::= Struct Identificador Llave_a DECLARACION_STRUCT Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STRUCT",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARACION_STRUCT ::= DECLARACION DECLARACION_STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARACION_STRUCT ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRUCT",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COUT ::= Cout Op_relacional Comillas CADENA Comillas SENTENCIACOUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COUT ::= Cout Op_relacional Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIACOUT ::= Op_relacional Comillas CADENA Comillas SENTENCIACOUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIACOUT ::= Op_relacional Identificador SENTENCIACOUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIACOUT ::= Op_relacional Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIACOUT ::= Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CIN ::= Cin Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SCANF ::= ScanF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCANF",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PRINTF ::= PrintF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PRINTF ::= PrintF Parent_a Comillas CADENA Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CADENA ::= Identificador CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CADENA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARACIONV ::= Identificador Coma DECLARACIONV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARACIONV ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_CASE ::= Case Comillas Identificador Comillas Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_CASE ::= Case Comillas Identificador Comillas Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= STRUCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= Const Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Const Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Float Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Const Char Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Char Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= Const Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= Long Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Long Double Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Long Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Double Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Long Long Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Long Long Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Long Long Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Long Long Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Long Long Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Long Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Long Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Long Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Long Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Long Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Long Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Short Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Short Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Short Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Short Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Short Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Short Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Const Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

