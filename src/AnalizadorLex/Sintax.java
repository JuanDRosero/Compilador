
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 16 21:13:48 COT 2021
//----------------------------------------------------

package AnalizadorLex;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 16 21:13:48 COT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\004\005\000\002\004\007\000\002" +
    "\004\007\000\002\004\006\000\002\004\006\000\002\004" +
    "\005\000\002\004\011\000\002\004\011\000\002\004\005" +
    "\000\002\004\011\000\002\004\005\000\002\004\011\000" +
    "\002\004\011\000\002\004\010\000\002\004\010\000\002" +
    "\004\011\000\002\004\011\000\002\006\011\000\002\012" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\006\000\002\012\007\000\002\007\015\000" +
    "\002\010\011\000\002\011\011\000\002\013\012\000\002" +
    "\013\011\000\002\024\010\000\002\024\012\000\002\024" +
    "\011\000\002\024\013\000\002\023\011\000\002\005\005" +
    "\000\002\005\004\000\002\005\004\000\002\014\003\000" +
    "\002\014\005\000\002\015\003\000\002\015\004\000\002" +
    "\016\011\000\002\016\013\000\002\017\013\000\002\021" +
    "\006\000\002\020\004\000\002\020\006\000\002\020\005" +
    "\000\002\020\007\000\002\022\010\000\002\022\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\006\015\006\065\004\001\002\000\004\057" +
    "\334\001\002\000\004\002\333\001\002\000\004\065\007" +
    "\001\002\000\004\057\010\001\002\000\004\060\011\001" +
    "\002\000\004\061\012\001\002\000\034\007\033\010\035" +
    "\013\042\014\013\015\024\016\030\017\014\020\017\033" +
    "\032\034\034\035\031\036\036\041\037\001\002\000\004" +
    "\057\300\001\002\000\004\071\271\001\002\000\040\007" +
    "\ufff7\010\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\041\ufff7\044" +
    "\ufff7\062\ufff7\001\002\000\040\007\ufff2\010\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\033\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\041\ufff2\044\ufff2\062\ufff2\001\002" +
    "\000\004\071\255\001\002\000\040\007\ufffd\010\ufffd\013" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\033\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\041\ufffd\044\ufffd\062\ufffd\001" +
    "\002\000\040\007\ufff0\010\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\041\ufff0\044\ufff0\062\ufff0\001\002\000\036\007\033" +
    "\010\035\013\042\014\013\015\024\016\030\017\014\020" +
    "\017\033\032\034\034\035\031\036\036\041\037\062\254" +
    "\001\002\000\040\007\uffec\010\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\041\uffec\044\uffec\062\uffec\001\002\000\006\055" +
    "\240\071\237\001\002\000\040\007\ufffb\010\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\041\ufffb\044\ufffb\062\ufffb\001\002" +
    "\000\040\007\ufff4\010\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\041\ufff4\044\ufff4\062\ufff4\001\002\000\040\007\ufff9\010" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\033\ufff9\034\ufff9\035\ufff9\036\ufff9\041\ufff9\044\ufff9\062" +
    "\ufff9\001\002\000\004\071\223\001\002\000\004\053\220" +
    "\001\002\000\004\057\206\001\002\000\004\071\167\001" +
    "\002\000\004\057\154\001\002\000\004\057\142\001\002" +
    "\000\004\053\122\001\002\000\004\057\075\001\002\000" +
    "\040\007\uffee\010\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\033\uffee\034\uffee\035\uffee\036\uffee\041" +
    "\uffee\044\uffee\062\uffee\001\002\000\040\007\ufff5\010\ufff5" +
    "\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\041\ufff5\044\ufff5\062\ufff5" +
    "\001\002\000\004\057\043\001\002\000\006\056\045\071" +
    "\046\001\002\000\004\060\057\001\002\000\006\060\uffd8" +
    "\066\uffd8\001\002\000\004\053\047\001\002\000\012\005" +
    "\051\056\052\071\053\073\050\001\002\000\006\060\uffd6" +
    "\066\uffd6\001\002\000\006\005\054\071\055\001\002\000" +
    "\006\060\uffd7\066\uffd7\001\002\000\006\060\uffd5\066\uffd5" +
    "\001\002\000\006\060\uffd4\066\uffd4\001\002\000\004\005" +
    "\056\001\002\000\006\060\uffd3\066\uffd3\001\002\000\004" +
    "\061\060\001\002\000\034\007\033\010\035\013\042\014" +
    "\013\015\024\016\030\017\014\020\017\033\032\034\034" +
    "\035\031\036\036\041\037\001\002\000\036\007\033\010" +
    "\035\013\042\014\013\015\024\016\030\017\014\020\017" +
    "\033\032\034\034\035\031\036\036\041\037\062\070\001" +
    "\002\000\040\007\ufff8\010\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\041\ufff8\044\ufff8\062\ufff8\001\002\000\040\007\ufff1" +
    "\010\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\041\ufff1\044\ufff1" +
    "\062\ufff1\001\002\000\040\007\uffef\010\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\033\uffef\034\uffef" +
    "\035\uffef\036\uffef\041\uffef\044\uffef\062\uffef\001\002\000" +
    "\040\007\ufffe\010\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\041" +
    "\ufffe\044\ufffe\062\ufffe\001\002\000\040\007\uffeb\010\uffeb" +
    "\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\041\uffeb\044\uffeb\062\uffeb" +
    "\001\002\000\040\007\ufffc\010\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\041\ufffc\044\ufffc\062\ufffc\001\002\000\040\007" +
    "\uffd1\010\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\041\uffd1\044" +
    "\uffd1\062\uffd1\001\002\000\040\007\ufff3\010\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\041\ufff3\044\ufff3\062\ufff3\001\002" +
    "\000\040\007\ufffa\010\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\017\ufffa\020\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa" +
    "\041\ufffa\044\ufffa\062\ufffa\001\002\000\040\007\uffed\010" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\033\uffed\034\uffed\035\uffed\036\uffed\041\uffed\044\uffed\062" +
    "\uffed\001\002\000\040\007\ufff6\010\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\033\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\041\ufff6\044\ufff6\062\ufff6\001\002\000\004" +
    "\071\076\001\002\000\004\060\077\001\002\000\004\061" +
    "\100\001\002\000\004\042\101\001\002\000\006\005\105" +
    "\073\104\001\002\000\004\062\103\001\002\000\040\007" +
    "\uffc9\010\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\041\uffc9\044" +
    "\uffc9\062\uffc9\001\002\000\004\072\115\001\002\000\004" +
    "\071\106\001\002\000\004\005\107\001\002\000\004\072" +
    "\110\001\002\000\034\007\033\010\035\013\042\014\013" +
    "\015\024\016\030\017\014\020\017\033\032\034\034\035" +
    "\031\036\036\041\037\001\002\000\036\007\033\010\035" +
    "\013\042\014\013\015\024\016\030\017\014\020\017\033" +
    "\032\034\034\035\031\036\036\041\037\044\112\001\002" +
    "\000\004\066\113\001\002\000\006\042\101\062\uffcc\001" +
    "\002\000\004\062\uffca\001\002\000\034\007\033\010\035" +
    "\013\042\014\013\015\024\016\030\017\014\020\017\033" +
    "\032\034\034\035\031\036\036\041\037\001\002\000\036" +
    "\007\033\010\035\013\042\014\013\015\024\016\030\017" +
    "\014\020\017\033\032\034\034\035\031\036\036\041\037" +
    "\044\117\001\002\000\004\066\120\001\002\000\006\042" +
    "\101\062\uffcd\001\002\000\004\062\uffcb\001\002\000\004" +
    "\005\123\001\002\000\004\071\124\001\002\000\006\005" +
    "\uffc3\071\124\001\002\000\004\005\126\001\002\000\006" +
    "\053\131\066\130\001\002\000\004\066\140\001\002\000" +
    "\040\007\uffb9\010\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9" +
    "\017\uffb9\020\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\041" +
    "\uffb9\044\uffb9\062\uffb9\001\002\000\006\005\132\071\133" +
    "\001\002\000\004\071\124\001\002\000\006\053\131\066" +
    "\uffbd\001\002\000\004\066\uffbb\001\002\000\004\005\136" +
    "\001\002\000\006\053\131\066\uffbc\001\002\000\004\066" +
    "\uffba\001\002\000\040\007\uffb8\010\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\041\uffb8\044\uffb8\062\uffb8\001\002\000\004" +
    "\005\uffc2\001\002\000\006\056\045\071\046\001\002\000" +
    "\004\060\144\001\002\000\004\061\145\001\002\000\034" +
    "\007\033\010\035\013\042\014\013\015\024\016\030\017" +
    "\014\020\017\033\032\034\034\035\031\036\036\041\037" +
    "\001\002\000\036\007\033\010\035\013\042\014\013\015" +
    "\024\016\030\017\014\020\017\033\032\034\034\035\031" +
    "\036\036\041\037\062\147\001\002\000\042\007\uffd9\010" +
    "\uffd9\011\150\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\041\uffd9\044" +
    "\uffd9\062\uffd9\001\002\000\004\061\151\001\002\000\034" +
    "\007\033\010\035\013\042\014\013\015\024\016\030\017" +
    "\014\020\017\033\032\034\034\035\031\036\036\041\037" +
    "\001\002\000\036\007\033\010\035\013\042\014\013\015" +
    "\024\016\030\017\014\020\017\033\032\034\034\035\031" +
    "\036\036\041\037\062\153\001\002\000\040\007\uffd2\010" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\041\uffd2\044\uffd2\062" +
    "\uffd2\001\002\000\004\005\155\001\002\000\004\071\124" +
    "\001\002\000\004\005\157\001\002\000\004\070\160\001" +
    "\002\000\004\071\162\001\002\000\004\060\165\001\002" +
    "\000\006\060\uffc5\070\163\001\002\000\004\071\162\001" +
    "\002\000\004\060\uffc4\001\002\000\004\066\166\001\002" +
    "\000\040\007\uffbf\010\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf" +
    "\041\uffbf\044\uffbf\062\uffbf\001\002\000\006\045\171\054" +
    "\170\001\002\000\004\005\200\001\002\000\004\005\172" +
    "\001\002\000\006\005\173\071\174\001\002\000\004\066" +
    "\177\001\002\000\004\005\175\001\002\000\004\066\176" +
    "\001\002\000\040\007\uffda\010\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\041\uffda\044\uffda\062\uffda\001\002\000\040\007" +
    "\uffdc\010\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\041\uffdc\044" +
    "\uffdc\062\uffdc\001\002\000\006\005\201\071\202\001\002" +
    "\000\004\066\205\001\002\000\004\005\203\001\002\000" +
    "\004\066\204\001\002\000\040\007\uffdb\010\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\041\uffdb\044\uffdb\062\uffdb\001\002" +
    "\000\040\007\uffdd\010\uffdd\013\uffdd\014\uffdd\015\uffdd\016" +
    "\uffdd\017\uffdd\020\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\041\uffdd\044\uffdd\062\uffdd\001\002\000\004\005\207\001" +
    "\002\000\004\071\124\001\002\000\004\005\211\001\002" +
    "\000\006\060\212\070\213\001\002\000\004\066\217\001" +
    "\002\000\004\071\162\001\002\000\004\060\215\001\002" +
    "\000\004\066\216\001\002\000\040\007\uffc0\010\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\041\uffc0\044\uffc0\062\uffc0\001" +
    "\002\000\040\007\uffc1\010\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\041\uffc1\044\uffc1\062\uffc1\001\002\000\004\071\221" +
    "\001\002\000\004\066\222\001\002\000\040\007\uffbe\010" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\041\uffbe\044\uffbe\062" +
    "\uffbe\001\002\000\010\045\226\054\224\066\225\001\002" +
    "\000\004\073\233\001\002\000\040\007\uffe5\010\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\041\uffe5\044\uffe5\062\uffe5\001" +
    "\002\000\004\073\227\001\002\000\004\067\230\001\002" +
    "\000\004\073\231\001\002\000\004\066\232\001\002\000" +
    "\040\007\uffe3\010\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\041" +
    "\uffe3\044\uffe3\062\uffe3\001\002\000\004\067\234\001\002" +
    "\000\004\073\235\001\002\000\004\066\236\001\002\000" +
    "\040\007\uffe4\010\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\041" +
    "\uffe4\044\uffe4\062\uffe4\001\002\000\012\045\246\054\243" +
    "\055\245\066\244\001\002\000\004\071\241\001\002\000" +
    "\004\066\242\001\002\000\040\007\uffe6\010\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\033\uffe6\034" +
    "\uffe6\035\uffe6\036\uffe6\041\uffe6\044\uffe6\062\uffe6\001\002" +
    "\000\004\073\252\001\002\000\040\007\uffea\010\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\041\uffea\044\uffea\062\uffea\001" +
    "\002\000\004\066\251\001\002\000\004\073\247\001\002" +
    "\000\004\066\250\001\002\000\040\007\uffe8\010\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\041\uffe8\044\uffe8\062\uffe8\001" +
    "\002\000\040\007\uffe7\010\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\033\uffe7\034\uffe7\035\uffe7\036" +
    "\uffe7\041\uffe7\044\uffe7\062\uffe7\001\002\000\004\066\253" +
    "\001\002\000\040\007\uffe9\010\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\041\uffe9\044\uffe9\062\uffe9\001\002\000\004\002" +
    "\000\001\002\000\010\045\260\054\256\066\257\001\002" +
    "\000\004\073\265\001\002\000\040\007\uffe0\010\uffe0\013" +
    "\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\033\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\041\uffe0\044\uffe0\062\uffe0\001" +
    "\002\000\004\073\261\001\002\000\004\067\262\001\002" +
    "\000\004\073\263\001\002\000\004\066\264\001\002\000" +
    "\040\007\uffde\010\uffde\013\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\020\uffde\033\uffde\034\uffde\035\uffde\036\uffde\041" +
    "\uffde\044\uffde\062\uffde\001\002\000\004\067\266\001\002" +
    "\000\004\073\267\001\002\000\004\066\270\001\002\000" +
    "\040\007\uffdf\010\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\041" +
    "\uffdf\044\uffdf\062\uffdf\001\002\000\006\045\273\066\272" +
    "\001\002\000\040\007\uffe2\010\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\041\uffe2\044\uffe2\062\uffe2\001\002\000\004\005" +
    "\274\001\002\000\004\071\275\001\002\000\004\005\276" +
    "\001\002\000\004\066\277\001\002\000\040\007\uffe1\010" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\041\uffe1\044\uffe1\062" +
    "\uffe1\001\002\000\006\006\302\071\303\001\002\000\004" +
    "\060\327\001\002\000\004\071\320\001\002\000\004\045" +
    "\304\001\002\000\004\073\305\001\002\000\004\066\306" +
    "\001\002\000\006\056\045\071\046\001\002\000\004\066" +
    "\310\001\002\000\006\055\312\071\313\001\002\000\004" +
    "\060\uffce\001\002\000\004\071\317\001\002\000\006\054" +
    "\314\055\315\001\002\000\004\073\316\001\002\000\004" +
    "\060\uffc7\001\002\000\004\060\uffc8\001\002\000\004\060" +
    "\uffc6\001\002\000\004\045\321\001\002\000\004\073\322" +
    "\001\002\000\004\066\323\001\002\000\006\056\045\071" +
    "\046\001\002\000\004\066\325\001\002\000\006\055\312" +
    "\071\313\001\002\000\004\060\uffcf\001\002\000\004\061" +
    "\330\001\002\000\034\007\033\010\035\013\042\014\013" +
    "\015\024\016\030\017\014\020\017\033\032\034\034\035" +
    "\031\036\036\041\037\001\002\000\036\007\033\010\035" +
    "\013\042\014\013\015\024\016\030\017\014\020\017\033" +
    "\032\034\034\035\031\036\036\041\037\062\332\001\002" +
    "\000\040\007\uffd0\010\uffd0\013\uffd0\014\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0" +
    "\041\uffd0\044\uffd0\062\uffd0\001\002\000\004\002\001\001" +
    "\002\000\004\060\335\001\002\000\004\061\336\001\002" +
    "\000\034\007\033\010\035\013\042\014\013\015\024\016" +
    "\030\017\014\020\017\033\032\034\034\035\031\036\036" +
    "\041\037\001\002\000\036\007\033\010\035\013\042\014" +
    "\013\015\024\016\030\017\014\020\017\033\032\034\034" +
    "\035\031\036\036\041\037\062\340\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\021\004\017\006" +
    "\024\007\026\010\014\011\040\016\025\017\015\021\020" +
    "\022\037\023\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\064\006" +
    "\066\007\071\010\061\011\073\016\070\017\062\021\063" +
    "\022\072\023\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\060\004\017" +
    "\006\024\007\026\010\014\011\040\016\025\017\015\021" +
    "\020\022\037\023\022\001\001\000\026\004\064\006\066" +
    "\007\071\010\061\011\073\016\070\017\062\021\063\022" +
    "\072\023\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\003\110\004\017\006\024\007" +
    "\026\010\014\011\040\016\025\017\015\021\020\022\037" +
    "\023\022\001\001\000\026\004\064\006\066\007\071\010" +
    "\061\011\073\016\070\017\062\021\063\022\072\023\065" +
    "\001\001\000\002\001\001\000\004\024\113\001\001\000" +
    "\002\001\001\000\030\003\115\004\017\006\024\007\026" +
    "\010\014\011\040\016\025\017\015\021\020\022\037\023" +
    "\022\001\001\000\026\004\064\006\066\007\071\010\061" +
    "\011\073\016\070\017\062\021\063\022\072\023\065\001" +
    "\001\000\002\001\001\000\004\024\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\124\001\001\000" +
    "\004\015\140\001\001\000\002\001\001\000\004\020\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\134\001\001\000\004\020\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\003\145\004\017\006\024\007\026\010\014" +
    "\011\040\016\025\017\015\021\020\022\037\023\022\001" +
    "\001\000\026\004\064\006\066\007\071\010\061\011\073" +
    "\016\070\017\062\021\063\022\072\023\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\151\004\017" +
    "\006\024\007\026\010\014\011\040\016\025\017\015\021" +
    "\020\022\037\023\022\001\001\000\026\004\064\006\066" +
    "\007\071\010\061\011\073\016\070\017\062\021\063\022" +
    "\072\023\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\306\001\001\000\002\001" +
    "\001\000\004\005\310\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\323\001" +
    "\001\000\002\001\001\000\004\005\325\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\330\004\017\006" +
    "\024\007\026\010\014\011\040\016\025\017\015\021\020" +
    "\022\037\023\022\001\001\000\026\004\064\006\066\007" +
    "\071\010\061\011\073\016\070\017\062\021\063\022\072" +
    "\023\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\336\004\017" +
    "\006\024\007\026\010\014\011\040\016\025\017\015\021" +
    "\020\022\037\023\022\001\001\000\026\004\064\006\066" +
    "\007\071\010\061\011\073\016\070\017\062\021\063\022" +
    "\072\023\065\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // COUT ::= Cout Op_relacional Comillas CADENA Comillas SENTENCIACOUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COUT ::= Cout Op_relacional Comillas CADENA Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COUT",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIACOUT ::= Op_relacional Comillas CADENA Comillas SENTENCIACOUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIACOUT ::= Op_relacional Identificador SENTENCIACOUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIACOUT ::= Op_relacional Comillas CADENA Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIACOUT ::= Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACOUT",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CIN ::= Cin Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CIN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SCANF ::= ScanF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCANF",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINTF ::= PrintF Parent_a Comillas CADENA Comillas Coma DECLARACIONV Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PRINTF ::= PrintF Parent_a Comillas CADENA Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTF",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CADENA ::= Identificador CADENA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CADENA ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACIONV ::= Identificador Coma DECLARACIONV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACIONV ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONV",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SENTENCIA_CASE Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_CASE ::= Case Comillas Identificador Comillas Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma SENTENCIA_CASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_CASE ::= Case Comillas Identificador Comillas Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CASE",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= For Parent_a SENTENCIA_FOR Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Float Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Float Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Char Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Char Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Double Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Double Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Double Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= COUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= CIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA SCANF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SCANF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

